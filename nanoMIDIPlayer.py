import os
import re
import io
import sys
import time
import json
import mido
import random
import base64
import ctypes
import datetime
import requests
import argparse
import platform
import threading
import webbrowser
import subprocess
import customtkinter
import tkinter as tk
import keyboard as kb
import concurrent.futures

from io import BytesIO
from queue import Queue
from mido import MidiFile
from threading import Event
from PIL import Image, ImageTk
from pynput.keyboard import Controller, Key, Listener
from tkinter import filedialog, Toplevel, LEFT, SOLID, Label

version = "10.4.20"
os_name = platform.system()

if os_name == "Darwin":
    import HIServices # type: ignore
    is_input_trusted = HIServices.AXIsProcessTrusted()
    base_directory = os.path.join(os.path.expanduser("~"), 'nanoMIDIPlayer')
else:
    base_directory = os.getcwd()

config_filename = 'config.json'
config_path = os.path.join(base_directory, config_filename)

theme_filename = 'activeTheme.json'
theme_path = os.path.join(f"{base_directory}/assets", theme_filename)

LOGO = ""

class LoadingScreen(tk.Tk):
    def __init__(self):
        if not os_name == "Darwin":
            super().__init__()
            self.overrideredirect(True)
            self.wm_attributes("-topmost", True)
            if os_name == "Darwin":
                self.wm_attributes("-transparent", True)
            else:
                self.wm_attributes("-transparentcolor", "black")

            screen_width = self.winfo_screenwidth()
            screen_height = self.winfo_screenheight()
            x = (screen_width // 2) - (256 // 2)
            y = (screen_height // 2) - (256 // 2)
            self.geometry(f"+{x}+{y}")

            self.showLogo()

            self.after(1500, self.loadMainApp)
        else:
            os.makedirs(base_directory, exist_ok=True)
            if not os.path.exists(config_path):
                self.loadConfig()
            else:
                self.checkConfig()

            with open(config_path, 'r') as config_file:
                config_data = json.load(config_file)

            if config_data["forceTheme"] or not os.path.exists(theme_path):
                self.loadTheme()

            app = App()
            app.mainloop()

    def showLogo(self):
        image_data = base64.b64decode(LOGO)
        image = Image.open(BytesIO(image_data)).convert("RGBA")
        image = image.resize((256, 256), Image.LANCZOS)

        self.photo = ImageTk.PhotoImage(image)
        self.label = tk.Label(self, image=self.photo, bg="black")
        self.label.pack()

        if not os.path.exists(config_path):
            self.loadConfig()
        else:
            self.checkConfig()

        with open(config_path, 'r') as config_file:
            config_data = json.load(config_file)

        if config_data["forceTheme"] or not os.path.exists(theme_path):
            self.loadTheme()

    def checkConfig(self):
        url = "https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/main/config.json"
        response = requests.get(url)
        if response.status_code == 200:
            remote_config = response.json()
        else:
            print("Failed to retrieve remote configuration.")
            remote_config = {}

        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                local_config = json.load(f)
        else:
            local_config = {}

        updated = False
        for key, value in remote_config.items():
            if key not in local_config:
                local_config[key] = value
                updated = True

        if updated:
            with open(config_path, 'w') as f:
                json.dump(local_config, f, indent=4)
            print("Updated Config")
        else:
            print("Config Up to Date")

    def loadConfig(self):
        original_config = "https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/main/config.json"

        response = requests.get(original_config)
        config = response.json()
        if response.status_code == 200:
            with open(config_path, 'w') as config_file:
                json.dump(config, config_file, indent=4)
            print("Downloaded Config")

    def loadTheme(self):
        response = requests.get("https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/refs/heads/main/api/theme.json")

        if response.status_code == 200:
            theme_data = response.json()
            os.makedirs(f"{base_directory}/assets", exist_ok=True)

            default_theme = theme_data.get("defaultTheme")
            available_themes = theme_data.get("availableThemes", {})

            default_theme_url = available_themes.get(str(default_theme))
            if default_theme_url:
                theme_response = requests.get(default_theme_url)
                if theme_response.status_code == 200:
                    with open(theme_path, "w") as file:
                        json.dump(theme_response.json(), file, indent=4)
                    print("Downloaded Theme")

    def loadMainApp(self):
        self.destroy()
        app = App()
        app.mainloop()

class ToolTip(object):
    def __init__(self, widget):
        with open(theme_path, 'r') as theme_file:
            self.activeThemeData = json.load(theme_file)

        if os_name == 'Windows':
            self.font = customtkinter.CTkFont(size=14, weight="normal", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
        elif os_name == 'Darwin':
            self.font = customtkinter.CTkFont(size=14, weight="normal", family=self.activeThemeData["Theme"]["GlobalFont"]["macOS"])
        elif os_name == 'Linux':
            self.font = customtkinter.CTkFont(size=14, weight="normal", family=self.activeThemeData["Theme"]["GlobalFont"]["Linux"])
        else:
            self.font = customtkinter.CTkFont(size=14, weight="normal", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])

        self.widget = widget
        self.tipwindow = None
        self.id = None
        self.x = self.y = 0

    def showtip(self, text):
        with open(config_path, 'r') as config_file:
            self.config_data = json.load(config_file)
        if self.config_data["tooltip"]:
            self.text = text
            if self.tipwindow or not self.text:
                return
            x, y, cx, cy = self.widget.bbox("insert")
            x = x + self.widget.winfo_rootx() + 57
            y = y + cy + self.widget.winfo_rooty() +27
            self.tipwindow = tw = Toplevel(self.widget)
            tw.wm_overrideredirect(1)
            tw.wm_attributes("-topmost", True)
            tw.wm_geometry("+%d+%d" % (x, y))
            label = Label(tw, text=self.text, justify=LEFT,
                        background="#ffffe0", relief=SOLID, borderwidth=1,
                        font=self.font)
            label.pack(ipadx=1)

    def hidetip(self):
        tw = self.tipwindow
        self.tipwindow = None
        if tw:
            tw.destroy()

class App(customtkinter.CTk):
    def __init__(self):
        
        with open(config_path, 'r') as config_file:
            self.config_data = json.load(config_file)
        with open(theme_path, 'r') as theme_file:
            self.activeThemeData = json.load(theme_file)

        def b64toimage(b64string):
            data = base64.b64decode(b64string)
            return Image.open(io.BytesIO(data))

        self.playback_state = False
        self.max_log_messages = 4
        self.max_drumlog_messages = 11
        self.isRunning = False
        self.log_labels = []
        self.sustainToggle = False
        self.CloseThread = False
        self.pause_event = Event()
        self.pause_event.set()
        self.selected_device = None
        self.midi_file_path = None
        self.drums_midi_file_path = None
        self.hasUpdated = False
        self.playback_speed = 100
        self.ignore_key_press = False
        self.output_devices = mido.get_output_names()
        self.keyboard_controller = Controller()
        self.keyboard_queue = Queue()
        self.pressed_keys = set()
        self.themeNames = self.fetchThemes()
        self.currentTab = "home"

        self.active_threads = []
        self.thread_lock = threading.Lock()
        
        self.drumsMap = {
            42: self.config_data['drumsMap']['closed_Hi-Hat'],      # Closed Hi-Hat
            44: self.config_data['drumsMap']['closed_Hi-Hat2'],     # Closed Hi-Hat #2
            46: self.config_data['drumsMap']['open_Hi-Hat'],        # Open Hi-Hat
            48: self.config_data['drumsMap']['tom1'],               # Tom 1
            50: self.config_data['drumsMap']['tom1_2'],             # Tom 1 #2
            60: self.config_data['drumsMap']['tom'],                # Tom 2
            62: self.config_data['drumsMap']['tom2_2'],             # Tom 2 #2
            49: self.config_data['drumsMap']['rightCrash'],         # Right Crash
            55: self.config_data['drumsMap']['leftCrash'],          # Left Crash
            38: self.config_data['drumsMap']['snare'],              # Snare
            40: self.config_data['drumsMap']['snare2'],             # Snare #2
            37: self.config_data['drumsMap']['snareSide'],          # Snare Side
            35: self.config_data['drumsMap']['kick'],               # Kick
            36: self.config_data['drumsMap']['kick2'],              # Kick #2
            51: self.config_data['drumsMap']['ride'],               # Ride
            53: self.config_data['drumsMap']['rideBell'],           # Ride Bell
            39: self.config_data['drumsMap']['cowbell'],            # Cowbell
            52: self.config_data['drumsMap']['crashChina'],         # Chinese/Alt Crash Symbal
            57: self.config_data['drumsMap']['splashCrash'],        # Splash/Alt Crash Symbal #2
        }

        self.hotkeys = {
            'play': self.config_data['playHotkey'],
            'pause': self.config_data['pauseHotkey'],
            'stop': self.config_data['stopHotkey'],
            'speed': self.config_data['speedHotkey'],
            'slow': self.config_data['slowHotkey']
        }

        self.special_key_map = {
            # LISTENER > PYNPUT
            'ENTER': 'RETURN',
            'CTRL_L': 'CONTROL_L',
            'CTRL_R': 'CONTROL_R',
            'PRIOR': 'PAGE_UP',
            'NEXT': 'PAGE_DOWN',
            'SHIFT': 'SHIFT_L',
            'SHIFT_R': 'SHIFT_R',
            '<96>': '0',
            '<97>': '1',
            '<98>': '2',
            '<99>': '3',
            '<100>': '4',
            '<101>': '5',
            '<102>': '6',
            '<103>': '7',
            '<104>': '8',
            '<105>': '9',
            '<110>': 'PERIOD',
            'BRACKETRIGHT': ']',
            'BRACKETLEFT': '[',
            'APOSTROPHE': '\'',
            'BACKSLASH': '\\',
            'MINUS': '-',
            'EQUAL': '=',
            'COMMA': ',',
            'PERIOD': '.',
            'SLASH': '/',
            'ALT_R': 'ALT_GR',
            'SEMICOLON': ';',
        }

        self.listener = None
        self.start_tracked_thread(target=self.start_listener, daemon=False)
        
        parser = argparse.ArgumentParser(description='nanoMIDIPlayer')
        parser.add_argument('--debug', action='store_true', help='debug console')
        args = parser.parse_args()

        if args.debug:
            self.create_debug_console()
            print("console opened.")

        super().__init__()
        
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        if os_name == 'Windows':
            self.global_font = customtkinter.CTkFont(size=14, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font11 = customtkinter.CTkFont(size=11, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font12 = customtkinter.CTkFont(size=12, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font20 = customtkinter.CTkFont(size=20, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font40 = customtkinter.CTkFont(size=40, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
        elif os_name == 'Darwin':
            self.global_font = customtkinter.CTkFont(size=14, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["macOS"])
            self.global_font11 = customtkinter.CTkFont(size=11, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["macOS"])
            self.global_font12 = customtkinter.CTkFont(size=12, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["macOS"])
            self.global_font20 = customtkinter.CTkFont(size=20, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["macOS"])
            self.global_font40 = customtkinter.CTkFont(size=40, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["macOS"])
        elif os_name == 'Linux':
            self.global_font = customtkinter.CTkFont(size=14, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Linux"])
            self.global_font11 = customtkinter.CTkFont(size=11, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Linux"])
            self.global_font12 = customtkinter.CTkFont(size=12, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Linux"])
            self.global_font20 = customtkinter.CTkFont(size=20, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Linux"])
            self.global_font40 = customtkinter.CTkFont(size=40, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Linux"])
        else:
            self.global_font = customtkinter.CTkFont(size=14, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font11 = customtkinter.CTkFont(size=11, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font12 = customtkinter.CTkFont(size=12, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font20 = customtkinter.CTkFont(size=20, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])
            self.global_font40 = customtkinter.CTkFont(size=40, weight="bold", family=self.activeThemeData["Theme"]["GlobalFont"]["Windows"])

        self.title("nanoMIDIPlayer")
        self.geometry("600x450")
        self.resizable(False, False)

        self.topmost_var = tk.BooleanVar()
        self.topmost_var.set(False)

        icon_image = b64toimage(self.activeThemeData["Theme"]["Icons"]["icon"])
        bannerimage = b64toimage(self.activeThemeData["Theme"]["Icons"]["banner"])
        resetimage = b64toimage(self.activeThemeData["Theme"]["Icons"]["reset"])
        pianoimage = b64toimage(self.activeThemeData["Theme"]["Icons"]["piano"])
        drumimage = b64toimage(self.activeThemeData["Theme"]["Icons"]["drum"])
        downloadimage = b64toimage(self.activeThemeData["Theme"]["Icons"]["download"])
        searchimage = b64toimage(self.activeThemeData["Theme"]["Icons"]["search"])
        settings_image = b64toimage(self.activeThemeData["Theme"]["Icons"]["cogwheel"])
        padlock_image = b64toimage(self.activeThemeData["Theme"]["Icons"]["padlock"])
        accessibility_image = b64toimage(self.activeThemeData["Theme"]["Icons"]["accessibilityimg"])
        inputmonitor_image = b64toimage(self.activeThemeData["Theme"]["Icons"]["inputmonitorimg"])

        self.logo_image = customtkinter.CTkImage(bannerimage, size=(86, 26))
        self.reset_image = customtkinter.CTkImage(resetimage, size=(16, 16))
        self.pianoimage = customtkinter.CTkImage(pianoimage, size=(20, 20))
        self.drumimage = customtkinter.CTkImage(drumimage, size=(20, 20))
        self.downloadimagefile = customtkinter.CTkImage(downloadimage, size=(18, 18))
        self.searchimagefile = customtkinter.CTkImage(searchimage, size=(18, 18))
        self.settingsimage = customtkinter.CTkImage(settings_image, size=(18, 18))
        self.padlockimage = customtkinter.CTkImage(padlock_image, size=(18, 18))
        self.accessibilityimage = customtkinter.CTkImage(accessibility_image, size=(349, 87))
        self.inputmonitorimage = customtkinter.CTkImage(inputmonitor_image, size=(349, 87))

        icon_path = os.path.join(os.path.dirname(__file__), "temp_icon.ico")
        icon_image.save(icon_path)

        self.iconbitmap(icon_path)

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color=self.activeThemeData["Theme"]["Navigation"]["BackColor"])
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(5, weight=1)

        self.navigation_frame_label = customtkinter.CTkLabel(
            self.navigation_frame, text="", image=self.logo_image,
            compound="left", font=self.global_font20
        )
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)

        self.home_button = customtkinter.CTkButton(
            self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="MIDI Player",
            fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"], text_color=self.activeThemeData["Theme"]["Navigation"]["TextColor"], hover_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonHoverColor"],
            image=self.pianoimage, anchor="w", font=self.global_font, command=self.home_button_event
        )
        self.home_button.grid(row=1, column=0, sticky="ew")

        self.drums_tab_button = customtkinter.CTkButton(
            self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Drums Macro",
            fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"], text_color=self.activeThemeData["Theme"]["Navigation"]["TextColor"], hover_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonHoverColor"],
            image=self.drumimage, anchor="w", font=self.global_font, command=self.drums_tab_event
        )
        self.drums_tab_button.grid(row=2, column=0, sticky="ew")

        self.midi_hub = customtkinter.CTkButton(
            self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="MIDI Hub",
            fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"], text_color=self.activeThemeData["Theme"]["Navigation"]["TextColor"], hover_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonHoverColor"],
            image=self.pianoimage, anchor="w", font=self.global_font, command=self.midi_hub_event
        )
        self.midi_hub.grid(row=3, column=0, sticky="ew")

        self.settings_tab = customtkinter.CTkButton(
            self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Settings",
            fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"], text_color=self.activeThemeData["Theme"]["Navigation"]["TextColor"], hover_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonHoverColor"],
            image=self.settingsimage, anchor="w", font=self.global_font, command=self.settings_tab_event
        )
        self.settings_tab.grid(row=4, column=0, sticky="ew")

        def checkForUpdates():
            try:
                response = requests.get("https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/main/version")
                response.raise_for_status()
                version_info = response.json()

                latest_versions = version_info.get("latest", [])
                avoid_versions = version_info.get("avoid", [])
                alert_message = version_info.get("alertMessage", "")

                if version in avoid_versions:
                    return "urgent", alert_message
                elif version not in latest_versions:
                    return "update", ""
            except requests.RequestException as e:
                print(e)

            return "none", ""

        update_status, urgent_message = checkForUpdates()

        def redirectUpdate():
            webbrowser.open("https://github.com/NotHammer043/nanoMIDIPlayer/releases/latest")

        def downloadBootstrapper():
            URL = "https://github.com/NotHammer043/nanoMIDIPlayer/raw/main/dist/bootstrapper.exe"
            FOLDER_PATH = "assets"
            FILE_PATH = os.path.join(FOLDER_PATH, "bootstrapper.exe")

            notification = customtkinter.CTkButton(
                self.home_frame, text=f"Downloading Bootstrapper...\nIf theres issue downloading try\ndisabling your antivirus.", fg_color="#006400", hover_color="#023020", command=destroyMessage, font=self.global_font
            )
            notification.grid(row=0, column=0, padx=(0,0), pady=(10,0), sticky="ns")
            notification._text_label.configure(wraplength=300)

            def download(url, file_path):
                response = requests.get(url, stream=True)
                response.raise_for_status()

                with open(file_path, 'wb') as file:
                    for chunk in response.iter_content(chunk_size=8192):
                        file.write(chunk)


            os.makedirs(FOLDER_PATH, exist_ok=True)

            download(URL, FILE_PATH)
            print(f"Downloaded {FILE_PATH}")

            subprocess.Popen(FILE_PATH, creationflags=subprocess.CREATE_NEW_CONSOLE)
            os._exit(1)

        def downloadBootstrapperThreaded():
            threading.Thread(target=downloadBootstrapper,).start()

        if update_status == "update":
            self.updateAvailable = customtkinter.CTkButton(
                self.navigation_frame, text="Update Available", fg_color="#006900", hover_color="#003200", command=redirectUpdate, font=self.global_font
            )
            self.updateAvailable.grid(row=6, column=0, padx=(0,0), pady=(0,5), sticky="n")

            if not os_name == "Darwin":
                self.updateNow = customtkinter.CTkButton(
                    self.navigation_frame, text="Update Now", fg_color="#FF8C00", hover_color="#8B4000", command=downloadBootstrapperThreaded, font=self.global_font
                )
                self.updateNow.grid(row=7, column=0, padx=(0,0), pady=(0,5), sticky="n")

        if os_name == "Darwin":
            self.macWarn = customtkinter.CTkLabel(
                self.navigation_frame, text="MACOS IS NOT\nFULLY TESTED!\nREPORT ANY BUGS", fg_color="transparent", text_color="#191919",
                font=self.global_font
            )
            self.macWarn.grid(row=5, column=0, padx=0, pady=(10, 0), sticky="n")

        self.themeCustomWatermarkLN1 = customtkinter.CTkLabel(
            self.navigation_frame, text=self.activeThemeData["Theme"]["Navigation"]["CustomThemeWatermarkLN1"], fg_color="transparent", text_color=self.activeThemeData["Theme"]["Navigation"]["CustomWatermarkColor"], font=self.global_font
        )
        self.themeCustomWatermarkLN1.grid(row=6, column=0, padx=0, pady=(0, 0), sticky="n")

        self.themeCustomWatermarkLN2 = customtkinter.CTkLabel(
            self.navigation_frame, text=self.activeThemeData["Theme"]["Navigation"]["CustomThemeWatermarkLN2"], fg_color="transparent", text_color=self.activeThemeData["Theme"]["Navigation"]["CustomWatermarkColor"], font=self.global_font
        )
        self.themeCustomWatermarkLN2.grid(row=7, column=0, padx=0, pady=(0, 0), sticky="n")

        self.appName = customtkinter.CTkLabel(
            self.navigation_frame, text=" >> nanoMIDIPlayer << ", fg_color="transparent", text_color=self.activeThemeData["Theme"]["Navigation"]["WatermarkColor"], font=self.global_font
        )
        self.appName.grid(row=8, column=0, padx=0, pady=(0, 0), sticky="n")

        self.versionlabel = customtkinter.CTkLabel(
            self.navigation_frame, text=f"version {version}", fg_color="transparent", text_color=self.activeThemeData["Theme"]["Navigation"]["WatermarkColor"], font=self.global_font
        )
        self.versionlabel.grid(row=9, column=0, padx=0, pady=(0, 0), sticky="s")

        # CONFIG

        def switchUseMIDI():
            self.config_data['useMIDI'] = switchUseMIDIvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)
            self.stop_playback()
            self.stop_playback_flag.set()
            self.useMIDIStatus()
            if switchUseMIDIvar.get() == "on":
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"-------< WARNING >-------",)).start()
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"This will not press keys",)).start()
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"for you, it will simulate",)).start()
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"MIDI Data!",)).start()
            else:
                for widget in self.consolekl.winfo_children():
                    widget.destroy()
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"Macro Mode.",)).start()

        def switchSustain():
            self.config_data['sustainEnabled'] = switchSustainvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchNoDoubles():
            self.config_data['noDoubles'] = switchNoDoublesvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchVelocity():
            self.config_data['velocity'] = switchVelocityvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switch88Keys():
            self.config_data['88Keys'] = switch88Keysvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchRandomFail():
            self.config_data['randomFail'] = switchRandomFailvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchLoopSong():
            self.config_data['loopSong'] = switchLoopSongvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchTooltip():
            self.config_data['tooltip'] = switchTooltipvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchForceTheme():
            self.config_data['forceTheme'] = switchForceThemevar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchHoldKeys():
            self.config_data['holdKeys'] = switchHoldKeysvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

        def switchConsole():
            self.config_data['console'] = switchConsolevar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)
            for widget in self.consolekl.winfo_children():
                    widget.destroy()
            if self.config_data['console']:
                threading.Thread(target=self.consolekl_text_insert, args=(f"If playback is laggy",)).start()
                threading.Thread(target=self.consolekl_text_insert, args=(f"Consider disabling this :)",)).start()
            else:
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"Disabled",)).start()

        def switchTopmost():
            self.config_data['topMost'] = switchTopmostvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

            if self.config_data['topMost']:
                self.attributes('-topmost', True)
            else:
                self.attributes('-topmost', False)

        def switchTimestamp():
            self.config_data['timestamp'] = switchTimestampvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

            if not self.config_data.get('midiFile') == "":
                midifile = MidiFile(self.config_data.get('midiFile'))
                self.total_time = midifile.length
                self.timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                self.timeline.configure(text=self.timelineTextLoadMIDI)
            else:
                self.timelineTextLoadMIDI = f"0:00:00 / 0:00:00" if self.config_data['timestamp'] else f"X:XX:XX / 0:00:00"
                self.timeline.configure(text=self.timelineTextLoadMIDI)

        switchUseMIDIvar = customtkinter.StringVar(value="off")
        switchSustainvar = customtkinter.StringVar(value="off")
        switchNoDoublesvar = customtkinter.StringVar(value="off")
        switchVelocityvar = customtkinter.StringVar(value="off")
        switch88Keysvar = customtkinter.StringVar(value="off")
        switchConsolevar = customtkinter.StringVar(value="off")
        switchTopmostvar = customtkinter.StringVar(value="off")
        switchTimestampvar = customtkinter.StringVar(value="off")
        switchRandomFailvar = customtkinter.StringVar(value="off")
        switchLoopSongvar = customtkinter.StringVar(value="off")
        switchTooltipvar = customtkinter.StringVar(value="off")
        switchForceThemevar = customtkinter.StringVar(value="off")
        switchHoldKeysvar = customtkinter.StringVar(value="off")

        self.midi_port_lock = threading.Lock()

        switchUseMIDIvar.set("on" if self.config_data.get('useMIDI', False) else "off")
        switchSustainvar.set("on" if self.config_data.get('sustainEnabled', False) else "off")
        switchNoDoublesvar.set("on" if self.config_data.get('noDoubles', False) else "off")
        switchVelocityvar.set("on" if self.config_data.get('velocity', False) else "off")
        switch88Keysvar.set("on" if self.config_data.get('88Keys', False) else "off")
        switchConsolevar.set("on" if self.config_data.get('console', False) else "off")
        switchTopmostvar.set("on" if self.config_data.get('topMost', False) else "off")
        switchTimestampvar.set("on" if self.config_data.get('timestamp', False) else "off")
        switchRandomFailvar.set("on" if self.config_data.get('randomFail', False) else "off")
        switchLoopSongvar.set("on" if self.config_data.get('loopSong', False) else "off")
        switchTooltipvar.set("on" if self.config_data.get('tooltip', False) else "off")
        switchForceThemevar.set("on" if self.config_data.get('forceTheme', False) else "off")
        switchHoldKeysvar.set("on" if self.config_data.get('holdKeys', False) else "off")

        # MIDI
        self.home_frame = customtkinter.CTkFrame(self.master, corner_radius=0, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["BackgroundColor"])
        self.home_frame.grid_columnconfigure(0, weight=1)

        self.home_frame_label_1 = customtkinter.CTkLabel(
            self.home_frame, text="MIDI Output Device", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1.grid(row=0, column=0, padx=(0, 200), pady=(10, 0), sticky="s")

        self.home_frame_label_1_toggle = customtkinter.CTkSwitch(
            self.home_frame, text="Use MIDI", command=switchUseMIDI, variable=switchUseMIDIvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1_toggle.grid(row=0, column=0, padx=(0, 40), pady=(10, 0), sticky="e")

        self.CreateToolTip(self.home_frame_label_1_toggle, text = 'Simulates MIDI signals and sends them\nto the selected MIDI Output\n\nNOTE: Having this enabled won\'t simulate\nQWERTY Keys for you if you\'re looking to macro.')

        loopbe_device = next((device for device in self.output_devices if "LoopBe" in device), None)

        self.home_frame_combobox_1 = customtkinter.CTkOptionMenu(
            self.home_frame, width=350, values=self.output_devices, font=self.global_font, dropdown_font=self.global_font, command=self.stop_playback, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionBackColor"], dropdown_fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownBackground"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownButtonColor"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )

        if not self.output_devices:
            self.output_devices = ["No output devices available"]

        default_device = loopbe_device if loopbe_device else self.output_devices[0]
        self.home_frame_combobox_1.set(default_device)

        self.home_frame_combobox_1.grid(row=1, column=0, padx=0, pady=0)

        self.home_frame_label_2 = customtkinter.CTkLabel(
            self.home_frame, text="MIDI File Path", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_2.grid(row=2, column=0, padx=(0,200), pady=(10, 0))

        def switchMIDIEvent(event=None):
            self.ignore_key_press = False
            self.config_data["midiFile"] = self.home_frame_entry_1.get()
            with open(config_path, 'w') as file:
                json.dump(self.config_data, file, indent=2)

        self.home_frame_entry_1 = customtkinter.CTkOptionMenu(self.home_frame, width=350, values="", command=switchMIDIEvent, font=self.global_font, dropdown_font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionBackColor"], dropdown_fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownBackground"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownButtonColor"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"])
        self.home_frame_entry_1.grid(row=3, column=0, padx=20, pady=(10, 0))

        self.select_file_button = customtkinter.CTkButton(
            self.home_frame, text="Select File", command=self.open_file_dialog, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.select_file_button.grid(row=2, column=0, padx=(0,55), pady=(10,0), sticky="e")

        self.consolekl = tk.Frame(master=self.home_frame, width=200, height=90, bg=self.activeThemeData["Theme"]["MidiPlayer"]["ConsoleBackground"])
        self.consolekl.grid(row=4, column=0, padx=(0,40), pady=(35,0), sticky="ne")
        self.consolekl.pack_propagate(0)

        self.home_frame_label_3 = customtkinter.CTkLabel(
            self.home_frame, text=" Play:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_3.grid(row=5, column=0, padx=(0, 300), pady=(0, 60), sticky="s")

        self.play_hotkey = customtkinter.CTkButton(
            self.home_frame, text=self.config_data.get('playHotkey', 'F1'), width=70, command=self.getPlayHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.play_hotkey.grid(row=5, column=0, padx=(0, 165), pady=(0, 60), sticky="s")

        self.home_frame_label_4 = customtkinter.CTkLabel(
            self.home_frame, text="Pause:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_4.grid(row=5, column=0, padx=(0, 300), pady=(0, 30), sticky="s")

        self.pause_hotkey = customtkinter.CTkButton(
            self.home_frame, text=self.config_data.get('pauseHotkey', 'F2'), width=70, command=self.getPauseHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.pause_hotkey.grid(row=5, column=0, padx=(0, 165), pady=(0, 30), sticky="s")

        self.home_frame_label_5 = customtkinter.CTkLabel(
            self.home_frame, text=" Stop:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_5.grid(row=5, column=0, padx=(0, 300), pady=(0, 0), sticky="s")

        self.stop_hotkey = customtkinter.CTkButton(
            self.home_frame, text=self.config_data.get('stopHotkey', 'F3'), width=70, command=self.getStopHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.stop_hotkey.grid(row=5, column=0, padx=(0, 165), pady=(0, 0), sticky="s")

        self.home_frame_label_6 = customtkinter.CTkLabel(
            self.home_frame, text="Slow Down:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_6.grid(row=5, column=0, padx=(80, 0), pady=(0, 60), sticky="s")

        self.speed_hotkey = customtkinter.CTkButton(
            self.home_frame, text=self.config_data.get('speedHotkey', 'F4'), width=70, command=self.getSpeedUpHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.speed_hotkey.grid(row=5, column=0, padx=(250, 0), pady=(0, 60), sticky="s")

        self.home_frame_label_7 = customtkinter.CTkLabel(
            self.home_frame, text=" Speed Up:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_7.grid(row=5, column=0, padx=(80, 0), pady=(0, 30), sticky="s")

        self.slow_hotkey = customtkinter.CTkButton(
            self.home_frame, text=self.config_data.get('slowHotkey', 'F5'), width=70, command=self.getSlowDownHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.slow_hotkey.grid(row=5, column=0, padx=(250, 0), pady=(0, 30), sticky="s")

        self.home_frame_label_1_toggle_console = customtkinter.CTkSwitch(
            self.home_frame, text="Console", command=switchConsole, variable=switchConsolevar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1_toggle_console.grid(row=4, column=0, padx=(184, 0), pady=(10, 10), sticky="nw")

        self.CreateToolTip(self.home_frame_label_1_toggle_console, text = 'Displays the notes playing\n(Can cause slight lag while playing)')

        self.home_frame_label_1_toggle_sustain = customtkinter.CTkSwitch(
            self.home_frame, text="Sustain   ", command=switchSustain, variable=switchSustainvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1_toggle_sustain.grid(row=4, column=0, padx=(40, 0), pady=(10, 0), sticky="nw")

        self.CreateToolTip(self.home_frame_label_1_toggle_sustain, text = 'Simulates Pedal by "Spacebar"\nOnly works on supported games.')

        self.home_frame_label_1_toggle_nodoubles = customtkinter.CTkSwitch(
            self.home_frame, text="No Doubles", command=switchNoDoubles, variable=switchNoDoublesvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1_toggle_nodoubles.grid(row=4, column=0, padx=(40, 0), pady=(40, 0), sticky="nw")

        self.CreateToolTip(self.home_frame_label_1_toggle_nodoubles, text = 'Prevents double-triggering of keys')

        self.home_frame_label_1_toggle_velocity = customtkinter.CTkSwitch(
            self.home_frame, text="Velocity  ", command=switchVelocity, variable=switchVelocityvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1_toggle_velocity.grid(row=4, column=0, padx=(40, 0), pady=(70, 0), sticky="nw")

        self.CreateToolTip(self.home_frame_label_1_toggle_velocity, text = 'Simulates how hard a key is pressed by "CTRL"\nwhich affects the loudness of that note\nOnly works on supported')

        self.home_frame_label_1_toggle_88keys = customtkinter.CTkSwitch(
            self.home_frame, text="88 Keys   ", command=switch88Keys, variable=switch88Keysvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.home_frame_label_1_toggle_88keys.grid(row=4, column=0, padx=(40, 0), pady=(100, 10), sticky="nw")

        self.CreateToolTip(self.home_frame_label_1_toggle_88keys, text = 'Process MIDI notes according to the 88-key mapping.')

        self.play_button = customtkinter.CTkButton(
            self.home_frame, text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], width=80, command=self.playButtonCommand, font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"]
        )
        self.play_button.grid(row=10, column=0, padx=45, pady=(0, 0), sticky="w")

        self.reset_button = customtkinter.CTkButton(
            self.home_frame, text="Stop",fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], width=80, state="disabled", command=self.stop_playback, font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"]
        )
        self.reset_button.grid(row=10, column=0, padx=130, pady=(0, 0), sticky="w")

        self.timelineText = "0:00:00 / 0:00:00" if self.config_data['timestamp'] else "X:XX:XX / 0:00:00"

        self.timeline = customtkinter.CTkLabel(
            self.home_frame, text=self.timelineText, fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.timeline.grid(row=10, column=0, padx=(0, 50), pady=(0, 0), sticky="e")

        self.speedlabel = customtkinter.CTkLabel(
            self.home_frame, text="Speed", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.speedlabel.grid(row=9, column=0, padx=(0,290), pady=(15, 0))

        self.speed = customtkinter.CTkSlider(self.home_frame, from_=50, to=500, command=self.sliderupdate, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderBackColor"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderFillColor"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderCircleColor"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderCircleHoverColor"])
        self.speed.grid(row=9, column=0, padx=(0,50), pady=(15, 0))
        self.speed.set(100)

        self.CreateToolTip(self.speed, text = 'Playback Speed')

        self.resetspeed = customtkinter.CTkButton(
            self.home_frame, image=self.reset_image, text="", width=30, command=self.resetspeedvalue, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.resetspeed.grid(row=9, column=0, padx=(290, 0), pady=(15, 0))

        self.speedtext = customtkinter.CTkEntry(
            self.home_frame, placeholder_text="100", width=50, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedValueBoxBackColor"], font=self.global_font, border_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedValueBoxBorderColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"]
        )
        self.speedtext.grid(row=9, column=0, padx=(200,0), pady=(15, 0))
        self.speedtext.insert(0, "100")

        self.stop_playback_flag = threading.Event()

        # SETTINGS

        self.settings_tab_frame = customtkinter.CTkScrollableFrame(self.master, corner_radius=0, fg_color=self.activeThemeData["Theme"]["Settings"]["BackgroundColor"])

        self.settings_tab_frame_label_performance = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Performance", fg_color="transparent", font=self.global_font20, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_performance.grid(row=0, column=0, padx=(10, 0), pady=(15, 0), sticky="w")

        self.settings_tab_frame_label_toggle_timestamp = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Timestamp", command=switchTimestamp, variable=switchTimestampvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_timestamp.grid(row=1, column=0, padx=(20, 0), pady=(30, 0), sticky="nw")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_timestamp, text = 'Toggles timestamp updates')

        self.settings_tab_frame_open_ex_con = customtkinter.CTkButton(
            self.settings_tab_frame, text="Open Debug\nConsole", width=120, command=self.create_debug_console, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["ButtonHoverColor"]
        )
        self.settings_tab_frame_open_ex_con.grid(row=0, column=0, padx=(150, 0), pady=(14, 0), sticky="w")

        self.CreateToolTip(self.settings_tab_frame_open_ex_con, text = 'Opens up a CMD window with logs')

        self.settings_tab_frame_close_ex_con = customtkinter.CTkButton(
            self.settings_tab_frame, text="Close Debug\nConsole", width=120, command=self.close_debug_console, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["ButtonHoverColor"]
        )
        self.settings_tab_frame_close_ex_con.grid(row=0, column=0, padx=(280, 0), pady=(14, 0), sticky="w")

        self.CreateToolTip(self.settings_tab_frame_close_ex_con, text = 'Closes CMD Window')

        if os_name != 'Windows':
            self.settings_tab_frame_open_ex_con.configure(state='disabled')
            self.settings_tab_frame_close_ex_con.configure(state='disabled')

        self.settings_tab_frame_label_toggle_topmost = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Topmost", command=switchTopmost, variable=switchTopmostvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_topmost.grid(row=1, column=0, padx=(155, 0), pady=(30, 0), sticky="nw")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_topmost, text = 'Stays on top even if you don\'t focus on the app.')

        self.settings_tab_frame_label_toggle_decreaselabel = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Decrease Size", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_toggle_decreaselabel.grid(row=1, column=0, padx=(85,0), pady=(9, 0), sticky="n")

        self.settings_tab_frame_label_toggle_changedecrease = customtkinter.CTkSlider(self.settings_tab_frame, from_=1, to=100, width=125, command=self.sliderupdate_decreaseSize, fg_color=self.activeThemeData["Theme"]["Settings"]["SliderBackColor"], progress_color=self.activeThemeData["Theme"]["Settings"]["SliderFillColor"], button_color=self.activeThemeData["Theme"]["Settings"]["SliderCircleColor"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SliderCircleHoverColor"])
        self.settings_tab_frame_label_toggle_changedecrease.grid(row=2, column=0, padx=(85,0), pady=(5, 0), sticky="n")
        self.settings_tab_frame_label_toggle_changedecrease.set(self.config_data['decreaseSize'])

        self.CreateToolTip(self.settings_tab_frame_label_toggle_changedecrease, text = 'How much to decrease when using Slow/Speed hotkeys.')

        self.settings_tab_frame_label_toggle_resetdecrease = customtkinter.CTkButton(
            self.settings_tab_frame, image=self.reset_image, text="", width=30, command=self.resetvalue_decreaseSize, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["ButtonHoverColor"]
        )
        self.settings_tab_frame_label_toggle_resetdecrease.grid(row=1, column=0, padx=(140, 0), pady=(35, 0))

        self.settings_tab_frame_label_toggle_decreaseentry = customtkinter.CTkEntry(
            self.settings_tab_frame, placeholder_text="10", width=50, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], border_color=self.activeThemeData["Theme"]["Settings"]["ValueBoxBorderColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ValueBoxBackColor"]
        )
        self.settings_tab_frame_label_toggle_decreaseentry.grid(row=1, column=0, padx=(50,0), pady=(35, 0))
        self.settings_tab_frame_label_toggle_decreaseentry.insert(0, self.config_data['decreaseSize'])

        self.settings_tab_frame_label_toggle_decreaseentry.bind("<FocusOut>", self.slidertoentry_decreaseSize)
        self.settings_tab_frame_label_toggle_decreaseentry.bind("<KeyRelease>", self.slidertoentry_decreaseSize)
        self.settings_tab_frame_label_toggle_changedecrease.bind("<ButtonRelease-1>", self.entrytoslider_decreaseSize)

        self.settings_tab_frame_label_toggle_console = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Console", command=switchConsole, variable=switchConsolevar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_console.grid(row=1, column=0, padx=(20, 0), pady=(0, 0), sticky="nw")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_console, text = 'Displays the notes playing\n(Can cause slight lag while playing)')

        self.settings_tab_frame_label_qwerty = customtkinter.CTkLabel(
            self.settings_tab_frame, text="QWERTY Settings", fg_color="transparent", font=self.global_font20, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_qwerty.grid(row=2, column=0, padx=(10, 0), pady=(10, 0), sticky="w")

        self.settings_tab_frame_label_toggle_sustain = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Sustain", command=switchSustain, variable=switchSustainvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_sustain.grid(row=3, column=0, padx=(20, 0), pady=(5, 0), sticky="w")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_sustain, text = 'Simulates Pedal by "Spacebar"\nOnly works on supported games.')

        self.settings_tab_frame_label_toggle_nodoubles = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="No Doubles", command=switchNoDoubles, variable=switchNoDoublesvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_nodoubles.grid(row=4, column=0, padx=(20, 0), pady=(5, 0), sticky="w")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_nodoubles, text = 'Prevents double-triggering of keys')

        self.settings_tab_frame_label_toggle_velocity = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Velocity", command=switchVelocity, variable=switchVelocityvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_velocity.grid(row=5, column=0, padx=(20, 0), pady=(5, 0), sticky="nw")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_velocity, text = 'Simulates how hard a key is pressed by "CTRL"\nwhich affects the loudness of that note\nOnly works on supported')

        self.settings_tab_frame_label_toggle_88keys = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="88 Keys", command=switch88Keys, variable=switch88Keysvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_88keys.grid(row=5, column=0, padx=(20, 0), pady=(35, 0), sticky="nw")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_88keys, text = 'Process MIDI notes according to the 88-key mapping.')

        self.settings_tab_frame_close_ex_con = customtkinter.CTkButton(
            self.settings_tab_frame, text="Clear MIDI\nList", width=100, command=self.clearMIDI, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["ButtonHoverColor"]
        )
        self.settings_tab_frame_close_ex_con.grid(row=6, column=0, padx=(20, 0), pady=(10, 0), sticky="nw")

        self.CreateToolTip(self.settings_tab_frame_close_ex_con, text = 'Clears the MIDI Files from MIDI File Selector dropdown\nEXCEPT for files inside ./Midis')

        # SETTINGS > HOTKEYS

        self.settings_tab_frame_label_hotkey = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Hotkey Settings", fg_color="transparent", font=self.global_font20, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_hotkey.grid(row=8, column=0, padx=(10, 0), pady=(10, 0), sticky="w")

        self.settings_tab_frame_label_play = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Play", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_play.grid(row=9, column=0, padx=(33, 0), pady=(0, 0), sticky="w")

        self.settings_tab_frame_label_pause = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Pause", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_pause.grid(row=9, column=0, padx=(110, 0), pady=(0, 0), sticky="w")

        self.settings_tab_frame_label_stop = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Stop", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_stop.grid(row=9, column=0, padx=(193, 0), pady=(0, 0), sticky="w")

        self.settings_tab_frame_label_speed = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Slow Down", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_speed.grid(row=9, column=0, padx=(254, 0), pady=(0, 0), sticky="w")

        self.settings_tab_frame_label_slow = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Speed Up", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_slow.grid(row=9, column=0, padx=(340, 0), pady=(0, 0), sticky="w")


        self.settings_tab_frame_play_hotkey = customtkinter.CTkButton(
            self.settings_tab_frame, text=self.config_data.get('playHotkey', 'F1'), width=70, command=self.getPlayHotkey, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorHoverColor"]
        )
        self.settings_tab_frame_play_hotkey.grid(row=10, column=0, padx=(15, 165), pady=(0, 5), sticky="w")


        self.settings_tab_frame_pause_hotkey = customtkinter.CTkButton(
            self.settings_tab_frame, text=self.config_data.get('pauseHotkey', 'F2'), width=70, command=self.getPauseHotkey, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorHoverColor"]
        )
        self.settings_tab_frame_pause_hotkey.grid(row=10, column=0, padx=(95, 165), pady=(0, 5), sticky="w")


        self.settings_tab_frame_stop_hotkey = customtkinter.CTkButton(
            self.settings_tab_frame, text=self.config_data.get('stopHotkey', 'F3'), width=70, command=self.getStopHotkey, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorHoverColor"]
        )
        self.settings_tab_frame_stop_hotkey.grid(row=10, column=0, padx=(175, 165), pady=(0, 5), sticky="w")


        self.settings_tab_frame_speed_hotkey = customtkinter.CTkButton(
            self.settings_tab_frame, text=self.config_data.get('speedHotkey', 'F4'), width=70, command=self.getSpeedUpHotkey, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorHoverColor"]
        )
        self.settings_tab_frame_speed_hotkey.grid(row=10, column=0, padx=(255, 165), pady=(0, 5), sticky="w")


        self.settings_tab_frame_slow_hotkey = customtkinter.CTkButton(
            self.settings_tab_frame, text=self.config_data.get('slowHotkey', 'F5'), width=70, command=self.getSlowDownHotkey, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["HotkeySelectorHoverColor"]
        )
        self.settings_tab_frame_slow_hotkey.grid(row=10, column=0, padx=(337, 165), pady=(0, 5), sticky="w")

        self.settings_tab_miscellaneous = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Miscellaneous", fg_color="transparent", font=self.global_font20, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_miscellaneous.grid(row=3, column=0, padx=(85,0), pady=(0, 5), sticky="n")

        self.settings_tab_frame_label_toggle_holdkey = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Hold Keys", command=switchHoldKeys, variable=switchHoldKeysvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_holdkey.grid(row=4, column=0, padx=(100,0), pady=(0, 5), sticky="s")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_holdkey, text = 'If disabled, the pressed keys will immediately be released.')

        self.settings_tab_frame_label_toggle_tooltip = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Tooltip", command=switchTooltip, variable=switchTooltipvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_tooltip.grid(row=5, column=0, padx=(115,0), pady=(0, 60), sticky="s")

        if os_name == "Darwin":
            self.settings_tab_frame_label_toggle_tooltip.configure(state="disabled")
            switchTooltipvar.set("off")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_tooltip, text = 'Disables me :(')

        self.settings_tab_frame_label_toggle_loopSong = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Loop Song", command=switchLoopSong, variable=switchLoopSongvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_loopSong.grid(row=5, column=0, padx=(100,0), pady=(0, 30), sticky="s")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_loopSong, text = 'Repeats the song when it ends')

        self.settings_tab_frame_label_toggle_randomFail = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Random Fail", command=switchRandomFail, variable=switchRandomFailvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_randomFail.grid(row=5, column=0, padx=(85,0), pady=(0, 0), sticky="s")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_randomFail, text = 'Randomly fails some notes by "Speed" or "Velocity" to seem legit')

        self.settings_tab_frame_failspeedprclvl = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Speed Fail %", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_failspeedprclvl.grid(row=6, column=0, padx=(150,0), pady=(0, 0), sticky="nw")

        self.settings_tab_frame_speedfailspeedprcslider = customtkinter.CTkSlider(self.settings_tab_frame, from_=0, to=100, width=125, command=self.sliderupdate_failspeedprc, fg_color=self.activeThemeData["Theme"]["Settings"]["SliderBackColor"], progress_color=self.activeThemeData["Theme"]["Settings"]["SliderFillColor"], button_color=self.activeThemeData["Theme"]["Settings"]["SliderCircleColor"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SliderCircleHoverColor"])
        self.settings_tab_frame_speedfailspeedprcslider.grid(row=7, column=0, padx=(140,0), pady=(5, 0), sticky="nw")
        self.settings_tab_frame_speedfailspeedprcslider.set(self.config_data['failType']['speed'])

        self.CreateToolTip(self.settings_tab_frame_speedfailspeedprcslider, text = 'Slows Down/Speeds Up at random notes')

        self.settings_tab_frame_failspeedprcreset = customtkinter.CTkButton(
            self.settings_tab_frame, image=self.reset_image, text="", width=30, command=self.resetvalue_failspeedprc, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["ButtonHoverColor"]
        )
        self.settings_tab_frame_failspeedprcreset.grid(row=6, column=0, padx=(210, 0), pady=(25, 0), sticky="nw")

        self.settings_tab_frame_failspeedprcint = customtkinter.CTkEntry(
            self.settings_tab_frame, placeholder_text="10", width=50, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], border_color=self.activeThemeData["Theme"]["Settings"]["ValueBoxBorderColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ValueBoxBackColor"]
        )
        self.settings_tab_frame_failspeedprcint.grid(row=6, column=0, padx=(155,0), pady=(25, 0), sticky="nw")
        self.settings_tab_frame_failspeedprcint.insert(0, self.config_data['failType']['speed'])

        self.settings_tab_frame_failspeedprcint.bind("<FocusOut>", self.slidertoentry_failspeedprc)
        self.settings_tab_frame_failspeedprcint.bind("<KeyRelease>", self.slidertoentry_failspeedprc)
        self.settings_tab_frame_speedfailspeedprcslider.bind("<ButtonRelease-1>", self.entrytoslider_failspeedprc)

        self.settings_tab_frame_trpsprclvl = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Transpose Fail %", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_trpsprclvl.grid(row=6, column=0, padx=(85,0), pady=(0, 0), sticky="n")

        self.settings_tab_frame_trpsprcslider = customtkinter.CTkSlider(self.settings_tab_frame, from_=0, to=100, width=125, command=self.sliderupdate_TrpsInt, fg_color=self.activeThemeData["Theme"]["Settings"]["SliderBackColor"], progress_color=self.activeThemeData["Theme"]["Settings"]["SliderFillColor"], button_color=self.activeThemeData["Theme"]["Settings"]["SliderCircleColor"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["SliderCircleHoverColor"])
        self.settings_tab_frame_trpsprcslider.grid(row=7, column=0, padx=(85,0), pady=(5, 0), sticky="n")
        self.settings_tab_frame_trpsprcslider.set(self.config_data['failType']['transpose'])

        self.CreateToolTip(self.settings_tab_frame_trpsprcslider, text = 'Randomizes the velocity of random notes')

        self.settings_tab_frame_toggle_trpsprcreset = customtkinter.CTkButton(
            self.settings_tab_frame, image=self.reset_image, text="", width=30, command=self.resetvalue_TrpsInt, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["Settings"]["ButtonHoverColor"]
        )
        self.settings_tab_frame_toggle_trpsprcreset.grid(row=6, column=0, padx=(140, 0), pady=(25, 0))

        self.settings_tab_frame_toggle_trpsprcint = customtkinter.CTkEntry(
            self.settings_tab_frame, placeholder_text="10", width=50, font=self.global_font, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], border_color=self.activeThemeData["Theme"]["Settings"]["ValueBoxBorderColor"], fg_color=self.activeThemeData["Theme"]["Settings"]["ValueBoxBackColor"]
        )
        self.settings_tab_frame_toggle_trpsprcint.grid(row=6, column=0, padx=(50,0), pady=(25, 0))
        self.settings_tab_frame_toggle_trpsprcint.insert(0, self.config_data['failType']['transpose'])

        self.settings_tab_frame_toggle_trpsprcint.bind("<FocusOut>", self.slidertoentry_TrpsInt)
        self.settings_tab_frame_toggle_trpsprcint.bind("<KeyRelease>", self.slidertoentry_TrpsInt)
        self.settings_tab_frame_trpsprcslider.bind("<ButtonRelease-1>", self.entrytoslider_TrpsInt)

        # THEME

        themeName = self.activeThemeData["Name"]
        os.makedirs(f"{base_directory}/assets/customThemes", exist_ok=True)

        if themeName not in self.themeNames:
            self.themeNames.append(themeName)

        for filename in os.listdir(f"{base_directory}/assets/customThemes"):
            if filename.endswith('.json'):
                theme_name = filename + " (Custom)"
                if theme_name and theme_name not in self.themeNames:
                    self.themeNames.append(theme_name)

        def switchTheme(event=None):
            value = self.settings_tab_frame_theme_selector.get()
            self.config_data['forceTheme'] = False
            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

            self.stop_playback()
            self.destroy()

            if "(Custom)" not in value:
                response = requests.get("https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/refs/heads/main/api/theme.json")
                
                if response.status_code == 200:
                    theme_data = response.json()
                    available_themes = theme_data["availableThemes"]

                    if value in available_themes:
                        theme_url = available_themes[value]
                        
                        theme_response = requests.get(theme_url)
                        
                        if theme_response.status_code == 200:
                            with open(theme_path, 'w') as active_theme_file:
                                active_theme_file.write(theme_response.text)
                        else:
                            print(f"FAIL > {theme_url}. Code: ({theme_response.status_code})")
                    else:
                        print(f"'{value}' does not exist.")
                else:
                    print(f"Failed ({response.status_code})")
            else:
                custom_theme_name = value.replace(" (Custom)", "")
                custom_theme_path = os.path.join('assets', 'customThemes', custom_theme_name)

                if os.path.isfile(custom_theme_path):
                    with open(custom_theme_path, 'r') as custom_theme_file:
                        custom_theme_data = custom_theme_file.read()

                    with open(theme_path, 'w') as active_theme_file:
                        active_theme_file.write(custom_theme_data)
                else:
                    print(f"'{custom_theme_path}' does not exist.")

            new_app = App()
            new_app.mainloop()

            self.stop_playback()
            self.destroy()
            new_app = App()
            new_app.mainloop()

        self.settings_tab_frame_label_theme = customtkinter.CTkLabel(
            self.settings_tab_frame, text="Theme", fg_color="transparent", font=self.global_font20, text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"]
        )
        self.settings_tab_frame_label_theme.grid(row=11, column=0, padx=(10, 0), pady=(10, 0), sticky="w")

        self.settings_tab_frame_label_toggle_forceTheme = customtkinter.CTkSwitch(
            self.settings_tab_frame, text="Force API Theme", command=switchForceTheme, variable=switchForceThemevar,
            font=self.global_font, onvalue="on", offvalue="off",
            fg_color=self.activeThemeData["Theme"]["Settings"]["SwitchDisabled"],
            progress_color=self.activeThemeData["Theme"]["Settings"]["SwitchEnabled"],
            button_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircle"],
            button_hover_color=self.activeThemeData["Theme"]["Settings"]["SwitchCircleHovered"],
            text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"],
            text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )
        self.settings_tab_frame_label_toggle_forceTheme.grid(row=11, column=0, padx=(65, 0), pady=(0, 0), sticky="s")

        self.CreateToolTip(self.settings_tab_frame_label_toggle_forceTheme, text = 'Automatically fetch theme from nanomidi.net')

        self.settings_tab_frame_theme_selector = customtkinter.CTkOptionMenu(
            self.settings_tab_frame, width=380, command=switchTheme, values=self.themeNames, font=self.global_font, dropdown_font=self.global_font, fg_color=self.activeThemeData["Theme"]["Settings"]["OptionBackColor"], dropdown_fg_color=self.activeThemeData["Theme"]["Settings"]["OptionDropdownBackground"], button_color=self.activeThemeData["Theme"]["Settings"]["OptionDropdownButtonColor"], button_hover_color=self.activeThemeData["Theme"]["Settings"]["OptionDropdownButtonHoverColor"], text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], dropdown_text_color=self.activeThemeData["Theme"]["Settings"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["Settings"]["TextColorDisabled"]
        )

        self.settings_tab_frame_theme_selector.set(themeName)

        self.settings_tab_frame_theme_selector.grid(row=12, column=0, padx=(0, 150), pady=(5, 15))

        print(themeName)

        # MIDI HUB

        self.midi_hub_frame = customtkinter.CTkScrollableFrame(self.master, corner_radius=0, fg_color=self.activeThemeData["Theme"]["MIDIHub"]["BackgroundColor"])
        self.midi_hub_frame.grid_columnconfigure(0, weight=1)

        self.downloadimagefile = customtkinter.CTkImage(downloadimage, size=(18, 18))
        self.searchimagefile = customtkinter.CTkImage(searchimage, size=(18, 18))

        self.midi_data_url = "https://api.nanomidi.net/api/midiData"

        self.page_size = 10
        self.current_page = 1

        def searchBar(event=None):
            threading.Thread(target=self.filter_midi_data, args=(event,)).start()

        self.midi_hub_searchbar = customtkinter.CTkEntry(self.midi_hub_frame, placeholder_text="Search", width=225, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MIDIHub"]["SearchBarColor"], text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"], border_color=self.activeThemeData["Theme"]["MIDIHub"]["SearchBarBorderColor"])
        self.midi_hub_searchbar.grid(row=0, column=0, padx=20, pady=(10, 0), sticky="w")
        self.midi_hub_searchbar.bind("<Return>", searchBar)

        self.search_button = customtkinter.CTkButton(master=self.midi_hub_frame, text="", fg_color=self.activeThemeData["Theme"]["MIDIHub"]["SearchButtonColor"], hover_color=self.activeThemeData["Theme"]["MIDIHub"]["SearchButtonHoverColor"], width=24, height=24, command=self.searchButton, image=self.searchimagefile)
        self.search_button.grid(row=0, column=0, padx=20, pady=(10, 0), sticky="e")

        def sort_combo_command(value):
            threading.Thread(target=self.sort_midi_data, args=(value,)).start()
        self.sort_combo = customtkinter.CTkComboBox(master=self.midi_hub_frame, values=["Newest", "Oldest"], text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"], button_color=self.activeThemeData["Theme"]["MIDIHub"]["SortOptionDropdownButtonColor"], fg_color=self.activeThemeData["Theme"]["MIDIHub"]["SortOptionBackColor"], dropdown_fg_color=self.activeThemeData["Theme"]["MIDIHub"]["SortOptionDropdownBackground"], dropdown_font=self.global_font,command=sort_combo_command, width=100, font=self.global_font, button_hover_color=self.activeThemeData["Theme"]["MIDIHub"]["SortOptionDropdownButtonHoverColor"], dropdown_hover_color=self.activeThemeData["Theme"]["MIDIHub"]["SortOptionDropdownItemHover"], border_color=self.activeThemeData["Theme"]["MIDIHub"]["SortOptionBorderColor"])
        self.sort_combo.grid(row=0, column=0, padx=60, pady=(10, 0), sticky="e")

        self.download_folder = "Midis"
        if os_name == "Darwin":
            self.download_folder = os.path.join(base_directory, self.download_folder)

            if not os.path.exists(self.download_folder):
                os.makedirs(self.download_folder)
        else:
            if not os.path.exists(self.download_folder):
                os.makedirs(self.download_folder)

        # DRUMS MACRO

        self.drums_tab_frame = customtkinter.CTkFrame(self.master, corner_radius=0, fg_color="#0A0A0A")
        self.drums_tab_frame.grid_columnconfigure(0, weight=1)

        self.drums_frame_label_1 = customtkinter.CTkLabel(
            self.drums_tab_frame, text="MIDI File Path", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_1.grid(row=2, column=0, padx=(0,200), pady=(10, 0))

        def drumsSwitchMIDIEvent(event=None):
            self.ignore_key_press = False
            self.config_data["drumsMidiFile"] = self.drums_frame_entry_1.get()
            with open(config_path, 'w') as file:
                json.dump(self.config_data, file, indent=2)

        self.drums_frame_entry_1 = customtkinter.CTkOptionMenu(self.drums_tab_frame, width=350, values="", command=drumsSwitchMIDIEvent, font=self.global_font, dropdown_font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionBackColor"], dropdown_fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownBackground"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownButtonColor"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["OptionDropdownButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"])
        self.drums_frame_entry_1.grid(row=3, column=0, padx=20, pady=(10, 0))

        self.drums_select_file_button = customtkinter.CTkButton(
            self.drums_tab_frame, text="Select File", command=self.open_file_dialog_drums, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_select_file_button.grid(row=2, column=0, padx=(0,55), pady=(10,0), sticky="e")

        self.consolekl_drums = tk.Frame(master=self.drums_tab_frame, width=200, height=230, bg=self.activeThemeData["Theme"]["MidiPlayer"]["ConsoleBackground"])
        self.consolekl_drums.grid(row=4, column=0, padx=(0,40), pady=(35,0), sticky="ne")
        self.consolekl_drums.pack_propagate(0)

        self.drums_frame_label_3 = customtkinter.CTkLabel(
            self.drums_tab_frame, text=" Play:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_3.grid(row=4, column=0, padx=(0, 300), pady=(50, 0), sticky="n")

        self.drums_play_hotkey = customtkinter.CTkButton(
            self.drums_tab_frame, text=self.config_data.get('playHotkey', 'F1'), width=70, command=self.getPlayHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_play_hotkey.grid(row=4, column=0, padx=(0, 165), pady=(50, 0), sticky="n")

        self.drums_frame_label_4 = customtkinter.CTkLabel(
            self.drums_tab_frame, text="Pause:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_4.grid(row=4, column=0, padx=(0, 300), pady=(80, 0), sticky="n")

        self.drums_pause_hotkey = customtkinter.CTkButton(
            self.drums_tab_frame, text=self.config_data.get('pauseHotkey', 'F2'), width=70, command=self.getPauseHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_pause_hotkey.grid(row=4, column=0, padx=(0, 165), pady=(80, 0), sticky="n")

        self.drums_frame_label_5 = customtkinter.CTkLabel(
            self.drums_tab_frame, text=" Stop:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_5.grid(row=4, column=0, padx=(0, 300), pady=(110, 0), sticky="n")

        self.drums_stop_hotkey = customtkinter.CTkButton(
            self.drums_tab_frame, text=self.config_data.get('stopHotkey', 'F3'), width=70, command=self.getStopHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_stop_hotkey.grid(row=4, column=0, padx=(0, 165), pady=(110, 0), sticky="n")

        self.drums_frame_label_6 = customtkinter.CTkLabel(
            self.drums_tab_frame, text="Slow Down:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        ) 
        self.drums_frame_label_6.grid(row=4, column=0, padx=(0, 330), pady=(140, 0), sticky="n")

        self.drums_speed_hotkey = customtkinter.CTkButton(
            self.drums_tab_frame, text=self.config_data.get('speedHotkey', 'F4'), width=70, command=self.getSpeedUpHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_speed_hotkey.grid(row=4, column=0, padx=(0, 165), pady=(140, 0), sticky="n")

        self.drums_frame_label_7 = customtkinter.CTkLabel(
            self.drums_tab_frame, text=" Speed Up:", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_7.grid(row=4, column=0, padx=(0, 330), pady=(170, 0), sticky="n")

        self.drums_slow_hotkey = customtkinter.CTkButton(
            self.drums_tab_frame, text=self.config_data.get('slowHotkey', 'F5'), width=70, command=self.getSlowDownHotkey, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["HotkeySelectorHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_slow_hotkey.grid(row=4, column=0, padx=(0, 165), pady=(170, 0), sticky="n")

        self.drumsCredits = customtkinter.CTkLabel(
            self.drums_tab_frame, text="-♡ Drums Macro\ncreated by ♡-\n>> fearsomeorc1406 <<", fg_color="transparent", text_color=self.activeThemeData["Theme"]["Navigation"]["WatermarkColor"], font=self.global_font
        )
        self.drumsCredits.grid(row=4, column=0, padx=(0, 235), pady=(220, 20), sticky="n")

        self.drums_frame_label_1_toggle_console = customtkinter.CTkSwitch(
            self.drums_tab_frame, text="Console", command=switchConsole, variable=switchConsolevar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_1_toggle_console.grid(row=4, column=0, padx=(184, 0), pady=(10, 10), sticky="nw")

        self.CreateToolTip(self.drums_frame_label_1_toggle_console, text = 'Displays the notes playing\n(Can cause slight lag while playing)')

        """
        self.drums_frame_label_1_toggle_sustain = customtkinter.CTkSwitch(
            self.drums_tab_frame, text="Sustain   ", command=switchSustain, variable=switchSustainvar, font=self.global_font, onvalue="on", offvalue="off", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchDisabled"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchEnabled"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircle"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SwitchCircleHovered"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_frame_label_1_toggle_sustain.grid(row=4, column=0, padx=(40, 0), pady=(10, 0), sticky="nw")

        self.CreateToolTip(self.drums_frame_label_1_toggle_sustain, text = 'Simulates Pedal by "Spacebar"\nOnly works on supported games.')
        """

        self.drums_play_button = customtkinter.CTkButton(
            self.drums_tab_frame, text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], width=80, command=self.drumsPlayButtonCommand, font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"]
        )
        self.drums_play_button.grid(row=10, column=0, padx=45, pady=(0, 0), sticky="w")

        self.drums_reset_button = customtkinter.CTkButton(
            self.drums_tab_frame, text="Stop",fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], width=80, state="disabled", command=self.stop_playback, font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"]
        )
        self.drums_reset_button.grid(row=10, column=0, padx=130, pady=(0, 0), sticky="w")

        self.drums_timelineText = "0:00:00 / 0:00:00" if self.config_data['timestamp'] else "X:XX:XX / 0:00:00"

        self.drums_timeline = customtkinter.CTkLabel(
            self.drums_tab_frame, text=self.drums_timelineText, fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_timeline.grid(row=10, column=0, padx=(0, 50), pady=(0, 0), sticky="e")

        self.drums_speedlabel = customtkinter.CTkLabel(
            self.drums_tab_frame, text="Speed", fg_color="transparent", font=self.global_font, text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_speedlabel.grid(row=9, column=0, padx=(0,290), pady=(15, 0))

        self.drums_speed = customtkinter.CTkSlider(self.drums_tab_frame, from_=50, to=500, command=self.sliderupdate, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderBackColor"], progress_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderFillColor"], button_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderCircleColor"], button_hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedSliderCircleHoverColor"])
        self.drums_speed.grid(row=9, column=0, padx=(0,50), pady=(15, 0))
        self.drums_speed.set(100)

        self.CreateToolTip(self.drums_speed, text = 'Playback Speed')

        self.drums_resetspeed = customtkinter.CTkButton(
            self.drums_tab_frame, image=self.reset_image, text="", width=30, command=self.resetspeedvalue, font=self.global_font, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["ButtonHoverColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], text_color_disabled=self.activeThemeData["Theme"]["MidiPlayer"]["TextColorDisabled"]
        )
        self.drums_resetspeed.grid(row=9, column=0, padx=(290, 0), pady=(15, 0))

        self.drums_speedtext = customtkinter.CTkEntry(
            self.drums_tab_frame, placeholder_text="100", width=50, fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedValueBoxBackColor"], font=self.global_font, border_color=self.activeThemeData["Theme"]["MidiPlayer"]["SpeedValueBoxBorderColor"], text_color=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"]
        )
        self.drums_speedtext.grid(row=9, column=0, padx=(200,0), pady=(15, 0))
        self.drums_speedtext.insert(0, "100")

        def tabbind(tab):
            self.currentTab = tab
            print(self.currentTab)

            if self.currentTab == "drums":
                for widget in self.consolekl_drums.winfo_children():
                    widget.destroy()
                self.consolekl_text_insert_ignorefalse("NOTE: This will only work")
                self.consolekl_text_insert_ignorefalse("if your MIDI File")
                self.consolekl_text_insert_ignorefalse("specifically uses drums")
                self.consolekl_text_insert_ignorefalse("intrument!")

                self.speedtext.unbind("<FocusOut>")
                self.speedtext.unbind("<KeyRelease>")
                self.speed.unbind("<ButtonRelease-1>")
                
                self.drums_speedtext.bind("<FocusOut>", self.slidertoentry)
                self.drums_speedtext.bind("<KeyRelease>", self.slidertoentry)
                self.drums_speed.bind("<ButtonRelease-1>", self.entrytoslider_drums)
            elif self.currentTab == "home":
                self.drums_speedtext.unbind("<FocusOut>")
                self.drums_speedtext.unbind("<KeyRelease>")
                self.drums_speed.unbind("<ButtonRelease-1>")
                
                self.speedtext.bind("<FocusOut>", self.slidertoentry)
                self.speedtext.bind("<KeyRelease>", self.slidertoentry)
                self.speed.bind("<ButtonRelease-1>", self.entrytoslider)

        tabbind("home")
        self.home_button.bind("<Button-1>", lambda event: tabbind("home"))
        self.drums_tab_button.bind("<Button-1>", lambda event: tabbind("drums"))

        # PERMISSION

        def is_accessibility_allowed():
            script = '''
                tell application "System Events"
                    set uiEnabled to UI elements enabled
                end tell
                return uiEnabled
                '''
            result = subprocess.run(["osascript", "-e", script], capture_output=True, text=True)
            return "true" in result.stdout.lower()

        def accessibility():
            subprocess.run(["open", "x-apple.systempreferences:com.apple.preference.security?Privacy_Accessibility"])

        def input_monitoring():
            subprocess.run(["open", "x-apple.systempreferences:com.apple.preference.security?Privacy_ListenEvent"])

        if os_name == "Darwin" and not is_input_trusted or not is_accessibility_allowed:
            self.permission_tab = customtkinter.CTkButton(
                self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="PERMISSIONS\nREQUIRED!",
                fg_color="#6E0000", text_color=("gray90", "gray90"), hover_color="#4D0000",
                image=self.padlockimage, anchor="w", font=self.global_font, command=self.permission_tab_event
            )
            self.permission_tab.grid(row=6, column=0)

        self.permission_tab_frame = customtkinter.CTkFrame(self.master, corner_radius=0, fg_color="#0A0A0A")
        self.permission_tab_frame.grid_columnconfigure(0, weight=1)

        self.permission_tab_frame_label = customtkinter.CTkLabel(
            self.permission_tab_frame, text="Required Permissions for macOS", fg_color="transparent", font=self.global_font20
        )
        self.permission_tab_frame_label.grid(row=0, column=0, padx=(0, 0), pady=(10, 0), sticky="ns")

        self.accessibility_button = customtkinter.CTkButton(self.permission_tab_frame, width=350, text="Allow Accessibility Permission",
                                                            command=accessibility)

        self.accessibility_image = customtkinter.CTkButton(master=self.permission_tab_frame, text="", fg_color="white", width=100, height=100, state="disabled", image=self.accessibilityimage)
        self.inputmonitor_image = customtkinter.CTkButton(master=self.permission_tab_frame, text="", fg_color="white", width=100, height=100, state="disabled", image=self.inputmonitorimage)


        self.input_monitoring_button = customtkinter.CTkButton(self.permission_tab_frame, width=350, text="Allow Input Monitoring Permission",
                                                               command=input_monitoring)

        self.accessibility_image.grid(row=1, column=0, pady=(10, 0), sticky="ns")
        self.accessibility_button.grid(row=2, padx=0, pady=(10, 0), sticky="ns")

        self.inputmonitor_image.grid(row=3, column=0, pady=(10, 0), sticky="ns")
        self.input_monitoring_button.grid(row=4, padx=0, pady=(10, 0), sticky="ns")

        self.permission_tab_frame_label2 = customtkinter.CTkLabel(
            self.permission_tab_frame, text="Accessibility is required for keypress automation\n\nInput Monitoring is required for Play/Pause, etc hotkeys", fg_color="transparent",
            font=self.global_font12
        )
        self.permission_tab_frame_label2.grid(row=6, column=0, padx=(0, 0), pady=(10, 0), sticky="n")

        if os_name == "Darwin" and is_accessibility_allowed():
            self.accessibility_button.configure(state="disabled", text="Accessibility Permission Granted")

        if os_name == "Darwin" and is_input_trusted:
            self.input_monitoring_button.configure(state="disabled", text="Input Monitoring Permission Granted")

        # END

        added = self.config_data.get('addedMIDI', [])
        drumsAdded = self.config_data.get('drumsAddedMidi', [])

        midiDIR = [
            os.path.join(self.download_folder, file)
            for file in os.listdir(self.download_folder)
            if file.endswith('.mid') or file.endswith('.midi')
        ]

        allMidis = added + midiDIR

        currentVAL = list(self.home_frame_entry_1.cget("values"))

        uniqueMIDI = set(currentVAL + allMidis)
        currentVAL = list(uniqueMIDI)

        self.home_frame_entry_1.configure(values=currentVAL)
        self.drums_frame_entry_1.configure(values=drumsAdded)

        if currentVAL:
            self.home_frame_entry_1.configure(values=currentVAL)
            self.home_frame_entry_1.set(currentVAL[0])
        else:
            self.home_frame_entry_1.configure(values=[])
            self.home_frame_entry_1.set('')

        if drumsAdded:
            self.drums_frame_entry_1.configure(values=drumsAdded)
            self.drums_frame_entry_1.set(drumsAdded[0])
        else:
            self.drums_frame_entry_1.configure(values=[])
            self.drums_frame_entry_1.set('')

        def destroyMessage():
            self.warning.destroy()

        if update_status == "urgent":
            self.warning = customtkinter.CTkButton(
                self.home_frame, text=f"VERSION WARNING!\n\n{urgent_message}\n\n[CLICK HERE TO IGNORE]", fg_color="#FF0000", hover_color="#8B0000", command=destroyMessage, font=self.global_font
            )
            self.warning.grid(row=0, column=0, padx=(0,0), pady=(10,0), sticky="ns")
            self.warning._text_label.configure(wraplength=300)

            self.updateAvailable = customtkinter.CTkButton(
                self.navigation_frame, text="Update Available", fg_color="#FF0000", hover_color="#8B0000", command=redirectUpdate, font=self.global_font
            )
            self.updateAvailable.grid(row=7, column=0, padx=(0,0), pady=(0,5), sticky="n")

        if self.config_data['console']:
            self.consolekl_text_insert_ignorefalse("If playback is laggy",)
            self.consolekl_text_insert_ignorefalse("Consider disabling this :)")
        else:
            self.consolekl_text_insert_ignorefalse("Disabled")

        if self.config_data['topMost']:
            self.attributes('-topmost', True)
        else:
            self.attributes('-topmost', False)

        def ctrlO():
            if not self.isRunning:
                self.open_file_dialog()

        if not os_name == "Darwin":
            kb.add_hotkey('ctrl+O', ctrlO)

        self.select_frame_by_name("home")
        self.hasMIDI()
        self.useMIDIStatus()

    def clearMIDI(self, event=None):
        self.config_data["addedMIDI"] = []
        self.config_data["drumsAddedMidi"] = []
        self.home_frame_entry_1.configure(values=[])
        self.drums_frame_entry_1.configure(values=[])

        with open(config_path, 'w') as file:
            json.dump(self.config_data, file, indent=2)

        added = self.config_data.get('addedMIDI', [])

        midiDIR = [
            os.path.join(self.download_folder, file)
            for file in os.listdir(self.download_folder)
            if file.endswith('.mid') or file.endswith('.midi')
        ]

        allMidis = added + midiDIR

        currentVAL = list(self.home_frame_entry_1.cget("values"))

        uniqueMIDI = set(currentVAL + allMidis)
        currentVAL = list(uniqueMIDI)

        self.home_frame_entry_1.configure(values=currentVAL)

        if currentVAL:
            self.home_frame_entry_1.configure(values=currentVAL)
            self.home_frame_entry_1.set(currentVAL[0])
        else:
            self.home_frame_entry_1.configure(values=[])
            self.home_frame_entry_1.set('')

    def searchButton(self, event=None):
        self.filter_midi_data(event)

    def load_midi_data(self):
        response = requests.get(self.midi_data_url)
        if response.status_code != 200:
            please_wait = customtkinter.CTkLabel(
                self.midi_hub_frame, text="Couldn't reach\nnanomidi.net!", 
                text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
                compound="left", font=self.global_font40
            )
            please_wait.grid(row=1, column=0, padx=10, pady=(100,0), sticky="nsew")
            please_wait2 = customtkinter.CTkLabel(
                self.midi_hub_frame, text=f"Error code: {response.status_code}\n\nServer may be down or you\nare being rate limited!\nPlease report this to the developer!", 
                text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
                compound="left", font=self.global_font
            )
            please_wait2.grid(row=2, column=0, padx=10, pady=(90,0), sticky="nsew")
            return
        
        self.all_midi_data = response.json()
        self.all_midi_data.reverse()
        self.filtered_midi_data = self.all_midi_data
        self.total_pages = (len(self.filtered_midi_data) + self.page_size - 1) // self.page_size
        self.show_page(self.current_page)

    def fetch_image(self, midi):
        image_url = f"https://api.nanomidi.net/api/v2/images/{midi['imageFilename']}?size=100x100"
        response = requests.get(image_url, stream=True)
        return customtkinter.CTkImage(Image.open(response.raw), size=(100, 100))

    def sort_midi_data(self, selected_value):
        for widget in self.midi_hub_frame.winfo_children():
            if widget != self.midi_hub_searchbar and \
            (not hasattr(self, 'search_button') or widget != self.search_button) and \
            (not hasattr(self, 'sort_combo') or widget != self.sort_combo):
                widget.destroy()

        please_wait = customtkinter.CTkLabel(
            self.midi_hub_frame, text="Please Wait...", text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
            compound="left", font=self.global_font40
        )
        please_wait.grid(row=1, column=0, padx=10, pady=(150,0), sticky="nsew")
        please_wait2 = customtkinter.CTkLabel(
            self.midi_hub_frame, text="Fetching from nanomidi.net...", text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
            compound="left", font=self.global_font
        )
        please_wait2.grid(row=2, column=0, padx=10, pady=(100,0), sticky="nsew")

        self.midi_hub_frame.update()
                
        if selected_value == "Newest":
            self.all_midi_data.reverse()
        elif selected_value == "Oldest":
            self.all_midi_data.reverse()

        self.filtered_midi_data = self.all_midi_data
        self.total_pages = (len(self.filtered_midi_data) + self.page_size - 1) // self.page_size
        self.show_page(self.current_page)

    def show_page(self, page):
        for widget in self.midi_hub_frame.winfo_children():
            if widget != self.midi_hub_searchbar and \
            (not hasattr(self, 'search_button') or widget != self.search_button) and \
            (not hasattr(self, 'sort_combo') or widget != self.sort_combo):
                widget.destroy()

        self.midi_hub_frame.update()

        start_index = (page - 1) * self.page_size
        end_index = min(start_index + self.page_size, len(self.filtered_midi_data))

        with concurrent.futures.ThreadPoolExecutor() as executor:
            future_to_midi = {
                executor.submit(self.fetch_image, midi): midi for midi in self.filtered_midi_data[start_index:end_index]
            }

            for index, future in enumerate(concurrent.futures.as_completed(future_to_midi), start=1):
                midi = future_to_midi[future]
                try:
                    midi_image = future.result()
                except Exception as exc:
                    print(f"Error loading image for {midi['name']}: {exc}")
                    midi_image = None

                #self.create_midi_frame(index, midi, midi_image)
                threading.Thread(target=self.create_midi_frame, args=(index, midi, midi_image,)).start()

        self.midi_hub_footer()

    def create_midi_frame(self, row, midi, midi_image):
        midi_frame = customtkinter.CTkFrame(master=self.midi_hub_frame, height=100, fg_color=self.activeThemeData["Theme"]["MIDIHub"]["MidiCardBackColor"])
        midi_frame.grid(row=row, column=0, padx=20, pady=5, sticky="nsew")

        midi_image_button = customtkinter.CTkButton(
            master=midi_frame, text="", fg_color="transparent", width=100, height=100,
            state="disabled", image=midi_image
        )
        midi_image_button.grid(row=0, column=0, sticky="w")

        midi_name = customtkinter.CTkLabel(
            midi_frame, text=midi["name"],
            compound="left", font=self.global_font, text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"]
        )
        midi_name.grid(row=0, column=0, padx=120, pady=(0, 80), sticky="w")

        midi_artist = customtkinter.CTkLabel(
            midi_frame, text=midi["artists"], text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
            compound="left", font=self.global_font12
        )
        midi_artist.grid(row=0, column=0, padx=120, pady=(0, 35), sticky="w")

        midi_arr = customtkinter.CTkLabel(
            midi_frame, text="Arr: " + (midi["arranger"] if midi["arranger"] else "N/A"),
            compound="left", font=self.global_font11, text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"]
        )
        midi_arr.grid(row=0, column=0, padx=120, pady=(40, 0), sticky="w")

        midi_uploadedby = customtkinter.CTkLabel(
            midi_frame, text="Uploader: " + midi["uploader"],
            compound="left", font=self.global_font11, text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"]
        )
        midi_uploadedby.grid(row=0, column=0, padx=120, pady=(80, 0), sticky="w")

        midi_filename = midi["midiFilename"]
        if midi_filename:
            download_url = "https://api.nanomidi.net/api/midis/" + midi_filename
            midi_download = customtkinter.CTkButton(
                master=midi_frame, text="", fg_color=self.activeThemeData["Theme"]["MIDIHub"]["DownloadButtonColor"], hover_color=self.activeThemeData["Theme"]["MIDIHub"]["DownloadButtonHoverColor"], width=24, height=24,
                image=self.downloadimagefile, command=lambda url=download_url: self.download_midi(url)
            )
            midi_download.grid(row=0, column=0, padx=330, pady=(75, 0), sticky="e")

    def download_midi(self, url):
        response = requests.get(url)
        filename = url.split("/")[-1]
        filepath = os.path.join(self.download_folder, filename)
        self.config_data['midiFile'] = filepath

        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

        with open(filepath, "wb") as f:
            f.write(response.content)

        self.ignore_key_press = True
        self.stop_playback()

        current_values = list(self.home_frame_entry_1.cget("values"))

        if filepath not in current_values:
            current_values.append(filepath)
            self.home_frame_entry_1.configure(values=current_values)

        self.home_frame_entry_1.set(filepath)

        self.select_frame_by_name("home")
        self.currentTab = "home"

        midi_file = MidiFile(filepath)
        self.total_time = midi_file.length

        self.timelineTextLoadMIDI = (
            f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}"
            if self.config_data['timestamp']
            else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
        )

        self.timeline.configure(text=self.timelineTextLoadMIDI)

        threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=("Downloaded!",)).start()
        threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(filename,)).start()

        self.ignore_key_press = False


    def midi_hub_footer(self):
        pagination_frame = customtkinter.CTkFrame(master=self.midi_hub_frame, fg_color=self.activeThemeData["Theme"]["MIDIHub"]["PageControlFrameBackground"])
        pagination_frame.grid(row=self.page_size + 1, column=0, padx=20, pady=5, sticky="nsew")

        prev_button = customtkinter.CTkButton(master=pagination_frame, text="Previous", width=118, font=self.global_font, command=self.prev_page, text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"], fg_color=self.activeThemeData["Theme"]["MIDIHub"]["PreviousButtonColor"], hover_color=self.activeThemeData["Theme"]["MIDIHub"]["PreviousButtonHoverColor"])
        prev_button.grid(row=0, column=0, padx=9, pady=10)

        page_label = customtkinter.CTkLabel(master=pagination_frame, text=f"Page {self.current_page}/{self.total_pages}", font=self.global_font, text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"])
        page_label.grid(row=0, column=1, padx=(13, 0), pady=10)

        next_button = customtkinter.CTkButton(master=pagination_frame, text="Next", font=self.global_font, width=118, command=self.next_page, text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"], fg_color=self.activeThemeData["Theme"]["MIDIHub"]["NextButtonColor"], hover_color=self.activeThemeData["Theme"]["MIDIHub"]["NextButtonHoverColor"])
        next_button.grid(row=0, column=2, padx=18, pady=10)

    def prev_page(self):
        if self.current_page > 1:
            self.current_page -= 1
            threading.Thread(target=self.show_page, args=(self.current_page,)).start()

    def next_page(self):
        if self.current_page < self.total_pages:
            self.current_page += 1
            threading.Thread(target=self.show_page, args=(self.current_page,)).start()

    def filter_midi_data(self, event):
        for widget in self.midi_hub_frame.winfo_children():
            if widget != self.midi_hub_searchbar and \
            (not hasattr(self, 'search_button') or widget != self.search_button) and \
            (not hasattr(self, 'sort_combo') or widget != self.sort_combo):
                widget.destroy()
        please_wait = customtkinter.CTkLabel(
            self.midi_hub_frame, text="Please Wait...", text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
            compound="left", font=self.global_font40
        )
        please_wait.grid(row=1, column=0, padx=10, pady=(150,0), sticky="nsew")
        please_wait2 = customtkinter.CTkLabel(
            self.midi_hub_frame, text="Fetching from nanomidi.net...", text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
            compound="left", font=self.global_font
        )
        please_wait2.grid(row=2, column=0, padx=10, pady=(100,0), sticky="nsew")

        self.midi_hub_frame.update()

        search_query = self.midi_hub_searchbar.get().lower()
        self.filtered_midi_data = [
            midi for midi in self.all_midi_data
            if search_query in midi["name"].lower() or search_query in midi["artists"].lower()
        ]
        self.total_pages = (len(self.filtered_midi_data) + self.page_size - 1) // self.page_size
        self.current_page = 1
        self.show_page(self.current_page)

    def start_listener(self):
        self.listener = Listener(on_press=self.on_key_press)
        self.listener.start()

    def on_key_press(self, key):
        if self.ignore_key_press:
            return

        try:
            if hasattr(key, 'char') and key.char:
                key_str = key.char.upper()
            else:
                key_str = str(key).replace('Key.', '').upper()
                key_str = self.special_key_map.get(key_str, key_str)
            #print(key_str)

            if key_str == self.hotkeys['play']:
                if self.currentTab == "home":
                    self.toggle_playback()
                elif self.currentTab == "drums":
                    self.toggle_playback_drums()
            elif key_str == self.hotkeys['pause']:
                self.pause_playback()
            elif key_str == self.hotkeys['stop']:
                self.stop_playback()
            elif key_str == self.hotkeys['speed']:
                self.speedup_playback()
            elif key_str == self.hotkeys['slow']:
                self.slowdown_playback()
        except Exception as e:
            print(f"Error handling key press: {e}")

    def get_hotkey(self, hotkey_name, label):
        self.ignore_key_press = True
        self.updateCloneLabel(hotkey_name)

        label.configure(text="Press Key")
        self.bind("<Key>", lambda event: self.set_hotkey(event, hotkey_name, label))

    def set_hotkey(self, event, hotkey_name, label):
        new_hotkey = event.keysym.upper()
        new_hotkey = self.special_key_map.get(new_hotkey, new_hotkey)
        label.configure(text=new_hotkey)
        self.hotkeys[hotkey_name] = new_hotkey
        self.config_data[f'{hotkey_name}Hotkey'] = new_hotkey

        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

        self.updateClonedButton(hotkey_name, new_hotkey)
        self.unbind("<Key>")
        self.ignore_key_press = False

    def updateClonedButton(self, hotkey_name, new_hotkey):
        clones = {
            'play': ['settings_tab_frame_play_hotkey', 'drums_play_hotkey'],
            'pause': ['settings_tab_frame_pause_hotkey', 'drums_pause_hotkey'],
            'stop': ['settings_tab_frame_stop_hotkey', 'drums_stop_hotkey'],
            'speed': ['settings_tab_frame_speed_hotkey', 'drums_speed_hotkey'],
            'slow': ['settings_tab_frame_slow_hotkey', 'drums_slow_hotkey']
        }

        for clone_name in clones.get(hotkey_name, []):
            clone_label = getattr(self, clone_name, None)
            if clone_label:
                clone_label.configure(text=new_hotkey)

    def updateCloneLabel(self, hotkey_name):
        label = getattr(self, f'{hotkey_name}_hotkey', None)
        if label:
            label.configure(text="Press Key")

        clones = {
            'play': ['settings_tab_frame_play_hotkey', 'drums_play_hotkey'],
            'pause': ['settings_tab_frame_pause_hotkey', 'drums_pause_hotkey'],
            'stop': ['settings_tab_frame_stop_hotkey', 'drums_stop_hotkey'],
            'speed': ['settings_tab_frame_speed_hotkey', 'drums_speed_hotkey'],
            'slow': ['settings_tab_frame_slow_hotkey', 'drums_slow_hotkey']
        }

        for clone_name in clones.get(hotkey_name, []):
            clone_label = getattr(self, clone_name, None)
            if clone_label:
                clone_label.configure(text="Press Key")

    def hasMIDI(self):
        midi_file = self.config_data.get('midiFile')
        if midi_file and os.path.exists(midi_file):
            currentVAL = list(self.home_frame_entry_1.cget("values"))
            if midi_file not in currentVAL:
                currentVAL.append(midi_file)
                self.home_frame_entry_1.configure(values=currentVAL)

            self.home_frame_entry_1.set(midi_file)

            midifile = MidiFile(midi_file)
            self.total_time = midifile.length
            self.timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
            self.timeline.configure(text=self.timelineTextLoadMIDI)

            self.set_hotkeys()

        drums_midi_file = self.config_data.get('drumsMidiFile')
        if drums_midi_file and os.path.exists(drums_midi_file):
            currentVAL = list(self.drums_frame_entry_1.cget("values"))
            if drums_midi_file not in currentVAL:
                currentVAL.append(drums_midi_file)
                self.drums_frame_entry_1.configure(values=currentVAL)

            self.drums_frame_entry_1.set(drums_midi_file)

            midifile = MidiFile(drums_midi_file)
            self.total_time = midifile.length
            self.drums_timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
            self.drums_timeline.configure(text=self.drums_timelineTextLoadMIDI)

            self.set_hotkeys()

    def set_hotkeys(self):
        self.hotkeys['play'] = self.config_data.get('playHotkey')
        self.hotkeys['pause'] = self.config_data.get('pauseHotkey')
        self.hotkeys['stop'] = self.config_data.get('stopHotkey')
        self.hotkeys['speed'] = self.config_data.get('speedHotkey')
        self.hotkeys['slow'] = self.config_data.get('slowHotkey')

    def update_hotkey(self, key_type, new_hotkey):
        self.hotkeys[key_type] = new_hotkey
        self.config_data[f'{key_type}Hotkey'] = new_hotkey
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

        self.set_hotkeys()

    def useMIDIStatus(self, event=None):
        if not self.config_data.get('useMIDI', False):
            self.home_frame_combobox_1.configure(state="disabled")
            self.home_frame_label_1_toggle_sustain.configure(state="normal")
            self.home_frame_label_1_toggle_nodoubles.configure(state="normal")
            self.home_frame_label_1_toggle_velocity.configure(state="normal")
            self.home_frame_label_1_toggle_88keys.configure(state="normal")

            self.settings_tab_frame_label_toggle_sustain.configure(state="normal")
            self.settings_tab_frame_label_toggle_nodoubles.configure(state="normal")
            self.settings_tab_frame_label_toggle_velocity.configure(state="normal")
            self.settings_tab_frame_label_toggle_88keys.configure(state="normal")
        else:
            self.home_frame_combobox_1.configure(state="normal")
            self.home_frame_label_1_toggle_sustain.configure(state="disabled")
            self.home_frame_label_1_toggle_nodoubles.configure(state="disabled")
            self.home_frame_label_1_toggle_velocity.configure(state="disabled")
            self.home_frame_label_1_toggle_88keys.configure(state="disabled")

            self.settings_tab_frame_label_toggle_sustain.configure(state="disabled")
            self.settings_tab_frame_label_toggle_nodoubles.configure(state="disabled")
            self.settings_tab_frame_label_toggle_velocity.configure(state="disabled")
            self.settings_tab_frame_label_toggle_88keys.configure(state="disabled")

    def playButtonCommand(self, event=None):
        if self.isRunning:
            self.pause_playback(self)
        else:
            self.toggle_playback()

    def drumsPlayButtonCommand(self, event=None):
        if self.isRunning:
            self.pause_playback(self)
        else:
            self.toggle_playback_drums()

    def sliderupdate(self, value):
        rounded_value = round(float(value))
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(rounded_value))
        self.drums_speedtext.delete(0, "end")
        self.drums_speedtext.insert(0, str(rounded_value))
        self.playback_speed = min(500, rounded_value)

    def slidertoentry(self, event=None):
        try:
            value = float(self.speedtext.get())
            if 10 <= value <= 500:
                self.speed.set(value)
                self.drums_speed.set(value)
                
                self.drums_speedtext.delete(0, "end")
                self.drums_speedtext.insert(0, str(value))
        except ValueError:
            pass

    def entrytoslider(self, event):
        value = self.speed.get()
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, int(round(float(value))))

        self.drums_speedtext.delete(0, "end")
        self.drums_speedtext.insert(0, int(round(float(value))))
        self.drums_speed.set(value)

    def entrytoslider_drums(self, event):
        value = self.drums_speed.get()
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, int(round(float(value))))

        self.drums_speedtext.delete(0, "end")
        self.drums_speedtext.insert(0, int(round(float(value))))
        self.speed.set(value)

    def slidertoentry_decreaseSize(self, event=None):
        try:
            value = int(float(self.settings_tab_frame_label_toggle_decreaseentry.get()))
            if 1 <= value <= 100:
                self.settings_tab_frame_label_toggle_changedecrease.set(value)
                self.config_data['decreaseSize'] = value
                with open(config_path, 'w') as config_file:
                    json.dump(self.config_data, config_file, indent=2)
        except ValueError:
            pass

    def sliderupdate_decreaseSize(self, value):
        rounded_value = int(round(float(value)))
        self.settings_tab_frame_label_toggle_decreaseentry.delete(0, "end")
        self.settings_tab_frame_label_toggle_decreaseentry.insert(0, str(rounded_value))

        self.config_data['decreaseSize'] = rounded_value
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def entrytoslider_decreaseSize(self, event):
        value = int(self.settings_tab_frame_label_toggle_changedecrease.get())
        self.settings_tab_frame_label_toggle_decreaseentry.delete(0, "end")
        self.settings_tab_frame_label_toggle_decreaseentry.insert(0, str(value))

        self.config_data['decreaseSize'] = value
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def resetvalue_decreaseSize(self):
        self.settings_tab_frame_label_toggle_decreaseentry.delete(0, "end")
        self.settings_tab_frame_label_toggle_decreaseentry.insert(0, "10")
        self.settings_tab_frame_label_toggle_changedecrease.set(10)

        self.config_data['decreaseSize'] = 10
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def slidertoentry_TrpsInt(self, event=None):
        try:
            value = int(float(self.settings_tab_frame_toggle_trpsprcint.get()))
            if 0 <= value <= 100:
                self.settings_tab_frame_trpsprcslider.set(value)
                self.config_data['failType']['transpose'] = value
                with open(config_path, 'w') as config_file:
                    json.dump(self.config_data, config_file, indent=2)
        except ValueError:
            pass

    def sliderupdate_TrpsInt(self, value):
        rounded_value = int(round(float(value)))
        self.settings_tab_frame_toggle_trpsprcint.delete(0, "end")
        self.settings_tab_frame_toggle_trpsprcint.insert(0, str(rounded_value))

        self.config_data['failType']['transpose'] = rounded_value
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def entrytoslider_TrpsInt(self, event):
        value = int(self.settings_tab_frame_trpsprcslider.get())
        self.settings_tab_frame_toggle_trpsprcint.delete(0, "end")
        self.settings_tab_frame_toggle_trpsprcint.insert(0, str(value))

        self.config_data['failType']['transpose'] = value
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def resetvalue_TrpsInt(self):
        self.settings_tab_frame_toggle_trpsprcint.delete(0, "end")
        self.settings_tab_frame_toggle_trpsprcint.insert(0, "30")
        self.settings_tab_frame_trpsprcslider.set(30)

        self.config_data['failType']['transpose'] = 30
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def slidertoentry_failspeedprc(self, event=None):
        try:
            value = int(float(self.settings_tab_frame_failspeedprcint.get()))
            if 0 <= value <= 100:
                self.settings_tab_frame_speedfailspeedprcslider.set(value)
                self.config_data['failType']['speed'] = value
                with open(config_path, 'w') as config_file:
                    json.dump(self.config_data, config_file, indent=2)
        except ValueError:
            pass

    def sliderupdate_failspeedprc(self, value):
        rounded_value = int(round(float(value)))
        self.settings_tab_frame_failspeedprcint.delete(0, "end")
        self.settings_tab_frame_failspeedprcint.insert(0, str(rounded_value))

        self.config_data['failType']['speed'] = rounded_value
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def entrytoslider_failspeedprc(self, event):
        value = int(self.settings_tab_frame_speedfailspeedprcslider.get())
        self.settings_tab_frame_failspeedprcint.delete(0, "end")
        self.settings_tab_frame_failspeedprcint.insert(0, str(value))

        self.config_data['failType']['speed'] = value
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def resetvalue_failspeedprc(self):
        self.settings_tab_frame_failspeedprcint.delete(0, "end")
        self.settings_tab_frame_failspeedprcint.insert(0, "70")
        self.settings_tab_frame_speedfailspeedprcslider.set(70)

        self.config_data['failType']['speed'] = 70
        with open(config_path, 'w') as config_file:
            json.dump(self.config_data, config_file, indent=2)

    def resetspeedvalue(self):
        self.playback_speed = min(500, 100)
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, 100)
        self.speed.set(100)

        self.drums_speedtext.delete(0, "end")
        self.drums_speedtext.insert(0, 100)
        self.drums_speed.set(100)

    def getPlayHotkey(self):
        self.get_hotkey('play', self.play_hotkey)

    def getPauseHotkey(self):
        self.get_hotkey('pause', self.pause_hotkey)

    def getStopHotkey(self):
        self.get_hotkey('stop', self.stop_hotkey)

    def getSpeedUpHotkey(self):
        self.get_hotkey('speed', self.speed_hotkey)

    def getSlowDownHotkey(self):
        self.get_hotkey('slow', self.slow_hotkey)

    def toggle_playback(self, e=None):
        if not os.path.exists(self.home_frame_entry_1.get()):
            print(f"MIDI File does not exist.")
            threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"MIDI File does not exist.",)).start()
            return

        useMIDI = self.config_data.get('useMIDI', False)
        if not useMIDI and not self.isRunning and not os_name == "Darwin":
            print("Using MIDI2Qwerty")
            self.selected_device = self.home_frame_combobox_1.get()
            self.midi_file_path = self.home_frame_entry_1.get()
            self.CloseThread = False
            self.play_button.configure(text="Playing", fg_color="#db7b2b")
            self.reset_button.configure(state="normal", fg_color="#cc3232")
            self.isRunning = True
            velocityMap = "1234567890qwertyuiopasdfghjklzxc"
            letterNoteMap = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm"
            LowNotes = "1234567890qwert"
            HighNotes = "yuiopasdfghj"
            velocityList = [
                0, 4, 8, 12, 16, 20, 24, 28,
                32, 36, 40, 44, 48, 52, 56, 60,
                64, 68, 72, 76, 80, 84, 88, 92,
                96, 100, 104, 108, 112, 116, 120, 124
            ]

            def find_velocity_key(velocity):
                minimum = 0
                maximum = len(velocityList) - 1
                while minimum <= maximum:
                    index = (minimum + maximum) // 2
                    if velocityList[index] == velocity:
                        return velocityMap[index]
                    elif velocityList[index] < velocity:
                        minimum = index + 1
                    else:
                        maximum = index - 1
                return velocityMap[maximum]

            def simulate_key(type, note, velocity):
                if not -15 <= note - 36 <= 88:
                    return
                index = note - 36
                key = 0
                try:
                    key = letterNoteMap[index]
                except:
                    pass

                log_message = None

                if type == "note_on":
                    if self.config_data["velocity"]:
                        velocitykey = find_velocity_key(velocity)
                        kb.press('alt')
                        kb.press(velocitykey)
                        kb.release(velocitykey)
                        kb.release('alt')
                        log_message = f"velocity: alt + {velocitykey}"

                    if 0 <= note - 36 <= 60:
                        if self.config_data["noDoubles"]:
                            if re.search("[!@$%^*(]", key):
                                kb.release(letterNoteMap[index - 1])
                            else:
                                kb.release(key.lower())
                        if re.search("[!@$%^*(]", key):
                            kb.press('shift')
                            kb.press(letterNoteMap[index - 1])
                            kb.release('shift')
                            if not self.config_data["holdKeys"]:
                                kb.release(letterNoteMap[index - 1])
                            log_message = f"press: shift + {letterNoteMap[index - 1]}"
                        elif key.isupper():
                            kb.press('shift')
                            kb.press(key.lower())
                            kb.release('shift')
                            if not self.config_data["holdKeys"]:
                                kb.release(key.lower())
                            log_message = f"press: shift + {key.lower()}"
                        else:
                            kb.press(key)
                            self.pressed_keys.add(key)
                            if not self.config_data["holdKeys"]:
                                kb.release(key)
                            log_message = f"press: {key}"

                    elif self.config_data["88Keys"]:
                        K = None
                        if 20 <= note < 40:
                            K = LowNotes[note - 21]
                        else:
                            K = HighNotes[note - 109]
                        if K:
                            kb.release(K.lower())
                            kb.press('ctrl')
                            kb.press(K.lower())
                            kb.release('ctrl')
                            if not self.config_data["holdKeys"]:
                                kb.release(K.lower())
                            log_message = f"press: ctrl + {K.lower()}"
                elif 0 <= note - 36 <= 60:
                    if re.search("[!@$%^*(]", key):
                        kb.release(letterNoteMap[index - 1])
                        log_message = f"release: {letterNoteMap[index - 1]}"
                    else:
                        kb.release(key.lower())
                        self.pressed_keys.discard(key.lower())
                        log_message = f"release: {key.lower()}"
                else:
                    if 20 <= note < 40:
                        K = LowNotes[note - 21]
                    else:
                        K = HighNotes[note - 109]
                    kb.release(K.lower())
                    log_message = f"release: {K.lower()}"

                if log_message is not None:
                    if len(self.pressed_keys) > 1:
                        chord_keys = ' + '.join(sorted(self.pressed_keys))
                        print(f"chord: {chord_keys}")
                        if self.config_data.get('console', False):
                            threading.Thread(target=self.consolekl_text_insert, args=(f"chord: {chord_keys}",)).start()
                    else:
                        print(log_message)

                    if self.config_data.get('console', False):
                        threading.Thread(target=self.consolekl_text_insert, args=(f"{log_message}",)).start()

            def parse_midi(message):
                if message.type == "control_change" and self.config_data["sustainEnabled"]:
                    if not self.sustainToggle or message.value > self.config_data["sustainCutoff"]:
                        self.sustainToggle = True
                        kb.press('space')
                        print("press: space (sustain on)")
                    elif self.sustainToggle and message.value < self.config_data["sustainCutoff"]:
                        self.sustainToggle = False
                        kb.release('space')
                        print("release: space (sustain off)")
                else:
                    if message.type == "note_on" or message.type == "note_off":
                        if message.velocity == 0:
                            try:
                                simulate_key("note_off", message.note, message.velocity)
                            except IndexError:
                                pass
                        else:
                            try:
                                simulate_key(message.type, message.note, message.velocity)
                            except IndexError:
                                pass

            def midi_playback():
                print("nanoMIDI Mid2VK Translator v2.0")
                try:
                    mid = mido.MidiFile(self.midi_file_path)
                    start_time = time.time()
                    current_position = 0
                    total_duration = mid.length

                    for msg in mid:
                        self.pause_event.wait()
                        elapsed_time = time.time() - start_time

                        speed_factor = self.playback_speed / 100.0
                        wait_time = msg.time / speed_factor
                        
                        if self.config_data.get("randomFail"):
                            if random.random() < self.config_data["failType"]["speed"] / 100:
                                playback_speed_factor = random.uniform(0.5, 1.5)
                                wait_time *= playback_speed_factor
                            elif random.random() < self.config_data["failType"]["transpose"] / 100:
                                if hasattr(msg, 'note'):
                                    original_note = msg.note
                                    msg.note += random.randint(-12, 12)
                                    simulate_key("note_on", msg.note, msg.velocity)
                                    simulate_key("note_off", msg.note, msg.velocity)
                                    msg.note = original_note
                        
                        if wait_time > 0:
                            time.sleep(wait_time)

                        parse_midi(msg)

                        if self.CloseThread:
                            break

                        current_position += msg.time * (100 / self.playback_speed)
                        current_time_str = time.strftime("%H:%M:%S", time.gmtime(current_position)).split(':')
                        current_position_formatted = f"{int(current_time_str[0]) if current_time_str[0] != '00' else '0'}:{int(current_time_str[1]):02d}:{int(current_time_str[2]):02d}"
                        total_duration_str = time.strftime("%H:%M:%S", time.gmtime(total_duration)).split(':')
                        total_duration_formatted = f"{int(total_duration_str[0]) if total_duration_str[0] != '00' else '0'}:{int(total_duration_str[1]):02d}:{int(total_duration_str[2]):02d}"

                        def updatetimeline():
                            if not self.hasUpdated:
                                self.hasUpdated = True
                                self.timeline.configure(text=f"{current_position_formatted} / {total_duration_formatted}")
                                time.sleep(1)
                                self.hasUpdated = False

                        if self.config_data['timestamp'] and not self.hasUpdated:
                            self.start_tracked_thread(target=updatetimeline, daemon=True)

                    if self.config_data['loopSong'] and not self.CloseThread:
                        midi_playback()
                    else:
                        print("Done")
                        midi_file = MidiFile(self.midi_file_path)
                        self.total_time = midi_file.length
                        self.timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                        self.timeline.configure(text=self.timelineTextLoadMIDI)
                        self.isRunning = False
                        self.play_button.configure(text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"])
                        self.reset_button.configure(state="disabled", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])
                        threading.Thread(target=self.consolekl_text_insert, args=(f"----- Done -----",)).start()

                except Exception as e:
                    print("Error: ", e)

            self.start_tracked_thread(target=midi_playback, daemon=True)

        elif useMIDI:  # Use MIDI
            if not self.isRunning:
                print("Using MIDI Output")
                self.selected_device = self.home_frame_combobox_1.get()
                self.midi_file_path = self.home_frame_entry_1.get()
                if not self.midi_file_path:
                    print("No MIDI File selected")
                    threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"No MIDI File selected",)).start()
                    return

                self.CloseThread = False
                self.play_button.configure(text="Playing", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColorHover"])
                self.reset_button.configure(state="normal", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])

                self.isRunning = True


                def midi_playback():
                    print("nanoMIDI MIDI Output v2.0")
                    try:
                        mid = mido.MidiFile(self.midi_file_path)
                        start_time = time.time()
                        current_position = 0
                        total_duration = mid.length

                        with mido.open_output(self.selected_device) as output:
                            for msg in mid:
                                self.pause_event.wait()
                                elapsed_time = time.time() - start_time

                                speed_factor = self.playback_speed / 100.0
                                wait_time = msg.time / speed_factor
                                
                                if self.config_data.get("randomFail"):
                                    if random.random() < self.config_data["failType"]["speed"] / 100:
                                        playback_speed_factor = random.uniform(0.5, 1.5)
                                        wait_time *= playback_speed_factor
                                    elif random.random() < self.config_data["failType"]["transpose"] / 100:
                                        if hasattr(msg, 'note'):
                                            msg.note += random.randint(-12, 12)
                                
                                if wait_time > 0:
                                    time.sleep(wait_time)

                                if msg.type in ['note_on', 'note_off', 'control_change']:
                                    output.send(msg)

                                if msg.type in ["note_on"]:
                                    print(f"channel={msg.channel} note={msg.note} velocity={msg.velocity}")
                                    if self.config_data["console"]:
                                        threading.Thread(target=self.consolekl_text_insert, args=(f"chnl={msg.channel} note={msg.note} vlcty={msg.velocity}",)).start()

                                if self.CloseThread:
                                    break

                                current_position += msg.time * (100 / self.playback_speed)
                                current_time_str = time.strftime("%H:%M:%S", time.gmtime(current_position)).split(':')
                                current_position_formatted = f"{int(current_time_str[0]) if current_time_str[0] != '00' else '0'}:{int(current_time_str[1]):02d}:{int(current_time_str[2]):02d}"
                                total_duration_str = time.strftime("%H:%M:%S", time.gmtime(total_duration)).split(':')
                                total_duration_formatted = f"{int(total_duration_str[0]) if total_duration_str[0] != '00' else '0'}:{int(total_duration_str[1]):02d}:{int(total_duration_str[2]):02d}"

                                def updatetimeline():
                                    if not self.hasUpdated:
                                        self.hasUpdated = True
                                        self.timeline.configure(text=f"{current_position_formatted} / {total_duration_formatted}")
                                        time.sleep(1)
                                        self.hasUpdated = False

                                if self.config_data['timestamp'] and not self.hasUpdated:
                                    self.start_tracked_thread(target=updatetimeline, daemon=True)

                        if self.config_data['loopSong'] and not self.CloseThread:
                            midi_playback()
                        else:
                            print("Done")
                            midi_file = MidiFile(self.midi_file_path)
                            self.total_time = midi_file.length
                            self.timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                            self.timeline.configure(text=self.timelineTextLoadMIDI)
                            self.isRunning = False
                            self.play_button.configure(text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"])
                            self.reset_button.configure(state="disabled", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])
                            threading.Thread(target=self.consolekl_text_insert, args=(f"----- Done -----",)).start()

                    except Exception as e:
                        print("Error: ", e)

                self.start_tracked_thread(target=midi_playback, daemon=True)

        elif not useMIDI and not self.isRunning and os_name == "Darwin": # macOS MIDI2Qwerty [EXPERIMENTAL]
            print("Using MIDI2Qwerty - MACOS VERSION [EXPERIMENTAL]")
            self.selected_device = self.home_frame_combobox_1.get()
            self.midi_file_path = self.home_frame_entry_1.get()
            if not self.midi_file_path:
                print("No MIDI File selected")
                threading.Thread(target=self.consolekl_text_insert_ignorefalse,
                                 args=(f"No MIDI File selected",)).start()
                return
            self.CloseThread = False
            self.play_button.configure(text="Playing", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColorHover"])
            self.reset_button.configure(state="normal", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColor"],hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])
            self.isRunning = True

            velocityMap = "1234567890qwertyuiopasdfghjklzxc"
            letterNoteMap = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm"
            LowNotes = "1234567890qwert"
            HighNotes = "yuiopasdfghj"
            velocityList = [
                0, 4, 8, 12, 16, 20, 24, 28,
                32, 36, 40, 44, 48, 52, 56, 60,
                64, 68, 72, 76, 80, 84, 88, 92,
                96, 100, 104, 108, 112, 116, 120, 124
            ]

            def find_velocity_key(velocity):
                minimum = 0
                maximum = len(velocityList) - 1
                while minimum <= maximum:
                    index = (minimum + maximum) // 2
                    if velocityList[index] == velocity:
                        return velocityMap[index]
                    elif velocityList[index] < velocity:
                        minimum = index + 1
                    else:
                        maximum = index - 1
                return velocityMap[maximum]

            def handle_keyboard_events():
                while True:
                    event = self.keyboard_queue.get()
                    if event is None:
                        break
                    key, action = event
                    if action == 'press':
                        kb.press(key)
                    elif action == 'release':
                        kb.release(key)
                    self.keyboard_queue.task_done()

            def simulate_key(type, note, velocity):
                if not -15 <= note - 36 <= 88:
                    return
                index = note - 36
                key = 0
                try:
                    key = letterNoteMap[index]
                except:
                    pass

                log_message = None

                if type == "note_on":
                    if self.config_data["velocity"]:
                        velocitykey = find_velocity_key(velocity)
                        self.keyboard_controller.press(Key.alt)
                        self.keyboard_controller.press(velocitykey)
                        self.keyboard_controller.release(velocitykey)
                        self.keyboard_controller.release(Key.alt)
                        log_message = f"velocity: alt + {velocitykey}"

                    if 0 <= note - 36 <= 60:
                        if self.config_data["noDoubles"]:
                            if re.search("[!@$%^*(]", key):
                                self.keyboard_controller.release(letterNoteMap[index - 1])
                            else:
                                self.keyboard_controller.release(key.lower())
                        if re.search("[!@$%^*(]", key):
                            self.keyboard_controller.press(Key.shift)
                            self.keyboard_queue.put((key.lower(), 'press'))
                            log_message = f"press: shift + {key.lower()} (using both modules)"
                        elif key.isupper():
                            self.keyboard_controller.press(Key.shift)
                            self.keyboard_controller.press(key.lower())
                            self.keyboard_controller.release(Key.shift)
                            log_message = f"press: shift + {key.lower()}"
                        else:
                            if key.isdigit():
                                self.keyboard_queue.put((key, 'press'))
                                log_message = f"press: {key} (using keyboard module)"
                            else:
                                self.keyboard_controller.press(key)
                                log_message = f"press: {key}"
                    elif self.config_data["88Keys"]:
                        K = None
                        if 20 <= note < 40:
                            K = LowNotes[note - 21]
                        else:
                            K = HighNotes[note - 109]
                        if K:
                            self.keyboard_controller.release(K.lower())
                            self.keyboard_controller.press(Key.ctrl)
                            self.keyboard_controller.press(K.lower())
                            self.keyboard_controller.release(Key.ctrl)
                            log_message = f"press: ctrl + {K.lower()}"
                elif 0 <= note - 36 <= 60:
                    if re.search("[!@$%^*(]", key):
                        self.keyboard_queue.put((key.lower(), 'release'))
                        self.keyboard_controller.release(Key.shift)
                        log_message = f"release: shift + {key.lower()} (using both modules)"
                    else:
                        if key.isdigit():
                            self.keyboard_queue.put((key, 'release'))
                            log_message = f"release: {key} (using keyboard module)"
                        else:
                            self.keyboard_controller.release(key.lower())
                            log_message = f"release: {key.lower()}"
                else:
                    if 20 <= note < 40:
                        K = LowNotes[note - 21]
                    else:
                        K = HighNotes[note - 109]
                    self.keyboard_controller.release(K.lower())
                    log_message = f"release: {K.lower()}"

                if log_message is not None:
                    if len(self.pressed_keys) > 1:
                        chord_keys = ' + '.join(sorted(self.pressed_keys))
                        print(f"chord: {chord_keys}")
                        if self.config_data.get('console', False):
                            threading.Thread(target=self.consolekl_text_insert, args=(f"chord: {chord_keys}",)).start()
                    else:
                        print(log_message)

                if self.config_data.get('console', False):
                    threading.Thread(target=self.consolekl_text_insert, args=(f"{log_message}",)).start()

            def parse_midi(message):
                if message.type == "control_change" and self.config_data["sustainEnabled"]:
                    if not self.sustainToggle or message.value > self.config_data["sustainCutoff"]:
                        self.sustainToggle = True
                        self.keyboard_controller.press(Key.space)
                        print("press: space (sustain on)")
                    elif self.sustainToggle and message.value < self.config_data["sustainCutoff"]:
                        self.sustainToggle = False
                        self.keyboard_controller.release(Key.space)
                        print("release: space (sustain off)")
                else:
                    if message.type == "note_on" or message.type == "note_off":
                        if message.velocity == 0:
                            try:
                                simulate_key("note_off", message.note, message.velocity)
                            except IndexError:
                                pass
                        else:
                            try:
                                simulate_key(message.type, message.note, message.velocity)
                            except IndexError:
                                pass

            def midi_playback():
                print("nanoMIDI Mid2VK Translator v2.0")
                try:
                    mid = mido.MidiFile(self.midi_file_path)
                    start_time = time.time()
                    current_position = 0
                    total_duration = mid.length

                    keyboard_thread = threading.Thread(target=handle_keyboard_events, daemon=True)
                    keyboard_thread.start()

                    for msg in mid:
                        self.pause_event.wait()
                        elapsed_time = time.time() - start_time

                        speed_factor = self.playback_speed / 100.0
                        wait_time = msg.time / speed_factor
                        
                        if self.config_data.get("randomFail"):
                            if random.random() < self.config_data["failType"]["speed"] / 100:
                                playback_speed_factor = random.uniform(0.5, 1.5)
                                wait_time *= playback_speed_factor
                            elif random.random() < self.config_data["failType"]["transpose"] / 100:
                                if hasattr(msg, 'note'):
                                    msg.note += random.randint(-12, 12)
                        
                        if wait_time > 0:
                            time.sleep(wait_time)

                        parse_midi(msg)

                        if self.CloseThread:
                            break

                        current_position += msg.time * (100 / self.playback_speed)
                        current_time_str = time.strftime("%H:%M:%S", time.gmtime(current_position)).split(':')
                        current_position_formatted = f"{int(current_time_str[0]) if current_time_str[0] != '00' else '0'}:{int(current_time_str[1]):02d}:{int(current_time_str[2]):02d}"
                        total_duration_str = time.strftime("%H:%M:%S", time.gmtime(total_duration)).split(':')
                        total_duration_formatted = f"{int(total_duration_str[0]) if total_duration_str[0] != '00' else '0'}:{int(total_duration_str[1]):02d}:{int(total_duration_str[2]):02d}"

                        def updatetimeline():
                            if not self.hasUpdated:
                                self.hasUpdated = True
                                self.timeline.configure(
                                    text=f"{current_position_formatted} / {total_duration_formatted}")
                                time.sleep(1)
                                self.hasUpdated = False

                        if self.config_data['timestamp'] and not self.hasUpdated:
                            self.start_tracked_thread(target=updatetimeline, daemon=True)

                    if self.config_data['loopSong'] and not self.CloseThread:
                        midi_playback()
                    else:
                        print("Done")
                        midi_file = MidiFile(self.midi_file_path)
                        self.total_time = midi_file.length
                        self.timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                        self.timeline.configure(text=self.timelineTextLoadMIDI)
                        self.isRunning = False
                        self.play_button.configure(text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"])
                        self.reset_button.configure(state="disabled", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])
                        threading.Thread(target=self.consolekl_text_insert, args=(f"----- Done -----",)).start()

                except Exception as e:
                    print("Error: ", e)
                finally:
                    self.keyboard_queue.put(None)
                    keyboard_thread.join()

            threading.Thread(target=midi_playback, daemon=True).start()

    def toggle_playback_drums(self, e=None):
        if not os.path.exists(self.drums_frame_entry_1.get()):
            print(f"MIDI File does not exist.")
            threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"MIDI File does not exist.",)).start()
            return
        
        if not self.isRunning and not os_name == "Darwin":    
            self.drums_midi_file_path = self.drums_frame_entry_1.get()
            print("nanoMIDI Drums2VK Translator v1.0 // Made by: fearsomeorc1406")
            self.isRunning = True
            self.CloseThread = False

            self.drums_play_button.configure(text="Playing", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColorHover"])
            self.drums_reset_button.configure(state="normal", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])

            def play_midi():
                try:
                    mid = mido.MidiFile(self.drums_midi_file_path)
                    start_time = time.time()
                    current_position = 0
                    total_duration = mid.length

                    for msg in mid:
                        time.sleep(msg.time * (100 / self.playback_speed))
                        self.pause_event.wait()
                        elapsed_time = time.time() - start_time

                        """ Sustain broken for some reason idk i dont do drums
                        if msg.type == "control_change" and self.config_data["sustainEnabled"]:
                            if not self.sustainToggle or msg.value > self.config_data["sustainCutoff"]:
                                self.sustainToggle = True
                                kb.press('space')
                                print("press: space (sustain on)")
                            elif self.sustainToggle and msg.value < self.config_data["sustainCutoff"]:
                                self.sustainToggle = False
                                kb.release('space')
                                print("release: space (sustain off)")
                        """
                        
                        if msg.type == 'note_on' and msg.velocity > 0:
                            key = self.drumsMap.get(msg.note)
                            if key is not None:
                                kb.press(key)
                                if not self.config_data["holdKeys"]:
                                    kb.release(key)
                                print(f"press: {key}")
                                if self.config_data.get('console', False):
                                    threading.Thread(target=self.consolekl_text_insert, args=(f"press: {key}",)).start()
                        elif msg.type == 'note_off' or (msg.type == 'note_on' and msg.velocity == 0):
                            key = self.drumsMap.get(msg.note)
                            if key is not None:
                                kb.release(key)

                        if self.CloseThread:
                            break

                        self.CloseThread = False
                        current_time = time.time()
                        elapsed_time = current_time - start_time
                        sleep_time = max(0, msg.time * (100 / self.playback_speed) - elapsed_time)
                        time.sleep(sleep_time)
                        start_time = current_time

                        current_position += msg.time * (100 / self.playback_speed)
                        current_time_str = time.strftime("%H:%M:%S", time.gmtime(current_position)).split(':')
                        current_position_formatted = f"{int(current_time_str[0]) if current_time_str[0] != '00' else '0'}:{int(current_time_str[1]):02d}:{int(current_time_str[2]):02d}"
                        total_duration_str = time.strftime("%H:%M:%S", time.gmtime(total_duration)).split(':')
                        total_duration_formatted = f"{int(total_duration_str[0]) if total_duration_str[0] != '00' else '0'}:{int(total_duration_str[1]):02d}:{int(total_duration_str[2]):02d}"

                        def updatetimeline():
                            if not self.hasUpdated:
                                self.hasUpdated = True
                                self.drums_timeline.configure(text=f"{current_position_formatted} / {total_duration_formatted}")
                                time.sleep(1)
                                self.hasUpdated = False

                        if self.config_data['timestamp'] and not self.hasUpdated:
                            self.start_tracked_thread(target=updatetimeline, daemon=True)

                    if self.config_data['loopSong'] and not self.CloseThread:
                        print("repeat")
                        play_midi()
                    else:
                        print("Done")
                        midi_file = MidiFile(self.midi_file_path)
                        self.total_time = midi_file.length
                        self.drums_timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                        self.drums_timeline.configure(text=self.drums_timelineTextLoadMIDI)
                        self.isRunning = False
                        self.drums_play_button.configure(text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"])
                        self.drums_reset_button.configure(state="disabled", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])
                        threading.Thread(target=self.consolekl_text_insert, args=(f"----- Done -----",)).start()

                except FileNotFoundError:
                    print(f"File not found.")
                except Exception as e:
                    print(e)

        elif not self.isRunning and os_name == "Darwin": # macOS Drums
            self.drums_midi_file_path = self.drums_frame_entry_1.get()
            print("nanoMIDI Drums2VK Translator v1.0 // Made by: hdsfgh")
            self.isRunning = True
            self.CloseThread = False

            self.drums_play_button.configure(text="Playing", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColorHover"])
            self.drums_reset_button.configure(state="normal", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])

            def play_midi():
                try:
                    mid = mido.MidiFile(self.drums_midi_file_path)
                    start_time = time.time()
                    current_position = 0
                    total_duration = mid.length

                    for msg in mid:
                        time.sleep(msg.time * (100 / self.playback_speed))
                        self.pause_event.wait()
                        elapsed_time = time.time() - start_time

                        """ Sustain broken for some reason idk i dont do drums
                        if msg.type == "control_change" and self.config_data["sustainEnabled"]:
                            if not self.sustainToggle or msg.value > self.config_data["sustainCutoff"]:
                                self.sustainToggle = True
                                kb.press('space')
                                print("press: space (sustain on)")
                            elif self.sustainToggle and msg.value < self.config_data["sustainCutoff"]:
                                self.sustainToggle = False
                                kb.release('space')
                                print("release: space (sustain off)")
                        """
                        
                        if msg.type == 'note_on' and msg.velocity > 0:
                            key = self.drumsMap.get(msg.note)
                            if key is not None:
                                self.keyboard_controller.press(key)
                                if not self.config_data["holdKeys"]:
                                    self.keyboard_controller.release(key)
                                print(f"press: {key}")
                                if self.config_data.get('console', False):
                                    threading.Thread(target=self.consolekl_text_insert, args=(f"press: {key}",)).start()
                        elif msg.type == 'note_off' or (msg.type == 'note_on' and msg.velocity == 0):
                            key = self.drumsMap.get(msg.note)
                            if key is not None:
                                self.keyboard_controller.release(key)

                        if self.CloseThread:
                            break

                        self.CloseThread = False
                        current_time = time.time()
                        elapsed_time = current_time - start_time
                        sleep_time = max(0, msg.time * (100 / self.playback_speed) - elapsed_time)
                        time.sleep(sleep_time)
                        start_time = current_time

                        current_position += msg.time * (100 / self.playback_speed)
                        current_time_str = time.strftime("%H:%M:%S", time.gmtime(current_position)).split(':')
                        current_position_formatted = f"{int(current_time_str[0]) if current_time_str[0] != '00' else '0'}:{int(current_time_str[1]):02d}:{int(current_time_str[2]):02d}"
                        total_duration_str = time.strftime("%H:%M:%S", time.gmtime(total_duration)).split(':')
                        total_duration_formatted = f"{int(total_duration_str[0]) if total_duration_str[0] != '00' else '0'}:{int(total_duration_str[1]):02d}:{int(total_duration_str[2]):02d}"

                        def updatetimeline():
                            if not self.hasUpdated:
                                self.hasUpdated = True
                                self.drums_timeline.configure(text=f"{current_position_formatted} / {total_duration_formatted}")
                                time.sleep(1)
                                self.hasUpdated = False

                        if self.config_data['timestamp'] and not self.hasUpdated:
                            self.start_tracked_thread(target=updatetimeline, daemon=True)

                    if self.config_data['loopSong'] and not self.CloseThread:
                        print("repeat")
                        play_midi()
                    else:
                        print("Done")
                        midi_file = MidiFile(self.midi_file_path)
                        self.total_time = midi_file.length
                        self.drums_timelineTextLoadMIDI = f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}" if self.config_data['timestamp'] else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                        self.drums_timeline.configure(text=self.drums_timelineTextLoadMIDI)
                        self.isRunning = False
                        self.drums_play_button.configure(text="Play", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayColorHover"])
                        self.drums_reset_button.configure(state="disabled", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorDisabled"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["StopColorHover"])
                        threading.Thread(target=self.consolekl_text_insert, args=(f"----- Done -----",)).start()

                except FileNotFoundError:
                    print(f"File not found.")
                except Exception as e:
                    print(e)

        self.start_tracked_thread(target=play_midi, daemon=True)

    def pause_playback(self, event=None):
        if self.currentTab == "home":
            pauseButton = self.play_button
        elif self.currentTab == "drums":
            pauseButton = self.drums_play_button
        if self.isRunning:
            if self.pause_event.is_set():
                self.pause_event.clear()
                print("Paused")
                pauseButton.configure(text="Paused", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PausedColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PausedColorHover"])
                threading.Thread(target=self.consolekl_text_insert, args=(f"----- Paused -----",)).start()
            else:
                self.pause_event.set()
                print("Resumed")
                pauseButton.configure(text="Playing", fg_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColor"], hover_color=self.activeThemeData["Theme"]["MidiPlayer"]["PlayingColor"])
                threading.Thread(target=self.consolekl_text_insert, args=(f"----- Resumed -----",)).start()

    def stop_playback(self, event=None):
        if self.isRunning:
            self.pause_event.set()
            self.CloseThread = True
            for key in self.pressed_keys:
                self.keyboard_controller.release(key)
            self.pressed_keys.clear()

    def speedup_playback(self, event=None):
        self.playback_speed = max(10, self.playback_speed - self.config_data['decreaseSize'])
        self.speed.set(self.playback_speed)
        self.drums_speed.set(self.playback_speed)

        rounded_value = round(float(self.playback_speed))
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(rounded_value))

        self.drums_speedtext.delete(0, "end")
        self.drums_speedtext.insert(0, str(rounded_value))

        print(f"speed: {self.playback_speed}")

    def slowdown_playback(self, event=None):
        self.playback_speed = min(500, self.playback_speed + self.config_data['decreaseSize'])
        self.speed.set(self.playback_speed)
        self.drums_speed.set(self.playback_speed)

        rounded_value = round(float(self.playback_speed))
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(rounded_value))

        self.drums_speedtext.delete(0, "end")
        self.drums_speedtext.insert(0, str(rounded_value))

        print(f"speed: {self.playback_speed}")

    def consolekl_text_insert(self, text):
        if self.config_data.get('console', False):
            if self.currentTab == "drums":
                consoleklLoc = self.consolekl_drums
                max_messages = self.max_drumlog_messages
            else:
                consoleklLoc = self.consolekl
                max_messages = self.max_log_messages
            
            label = tk.Label(consoleklLoc, text=text, fg=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], bg=self.activeThemeData["Theme"]["MidiPlayer"]["ConsoleBackground"], height=1, font=self.global_font12)
            label.pack(anchor="sw")
            self.log_labels.append(label)

            if len(self.log_labels) > max_messages:
                oldest_label = self.log_labels.pop(0)
                oldest_label.destroy()

            if len(consoleklLoc.winfo_children()) > 20:
                for widget in consoleklLoc.winfo_children():
                    widget.destroy()

            consoleklLoc.update_idletasks()


    def consolekl_text_insert_ignorefalse(self, text):
        if self.currentTab == "drums":
            consoleklLoc = self.consolekl_drums
            max_messages = self.max_drumlog_messages
        else:
            consoleklLoc = self.consolekl
            max_messages = self.max_log_messages
        
        label = tk.Label(consoleklLoc, text=text, fg=self.activeThemeData["Theme"]["MidiPlayer"]["TextColor"], bg=self.activeThemeData["Theme"]["MidiPlayer"]["ConsoleBackground"], height=1, font=self.global_font12)
        label.pack(anchor="sw")
        self.log_labels.append(label)

        if len(self.log_labels) > max_messages:
            oldest_label = self.log_labels.pop(0)
            oldest_label.destroy()

        if len(consoleklLoc.winfo_children()) > 20:
            for widget in consoleklLoc.winfo_children():
                widget.destroy()

        consoleklLoc.update_idletasks()

    def open_file_dialog(self):
        self.home_frame_entry_1.set("")
        self.stop_playback_flag.set()
        self.playback_state = False
        self.play_button.configure(text="Play")
        self.CloseThread = True

        self.ignore_key_press = True
        self.stop_playback()

        file_path = filedialog.askopenfilename(filetypes=[("MIDI files", "*.mid"), ("MIDI files", "*.midi")])
        if file_path:
            currentVAL = list(self.home_frame_entry_1.cget("values"))
            if file_path not in currentVAL:
                currentVAL.append(file_path)
                self.home_frame_entry_1.configure(values=currentVAL)

            self.home_frame_entry_1.set(file_path)

            midi_file = MidiFile(file_path)
            self.total_time = midi_file.length
            self.timelineTextLoadMIDI = (
                f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                if self.config_data['timestamp']
                else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
            )
            self.timeline.configure(text=self.timelineTextLoadMIDI)

            self.config_data['midiFile'] = file_path
            if 'addedMIDI' not in self.config_data:
                self.config_data['addedMIDI'] = []
            if file_path not in self.config_data['addedMIDI']:
                self.config_data['addedMIDI'].append(file_path)

            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

            self.ignore_key_press = False

    def open_file_dialog_drums(self):
        self.drums_frame_entry_1.set("")
        self.stop_playback_flag.set()
        self.playback_state = False
        self.play_button.configure(text="Play")
        self.CloseThread = True

        self.ignore_key_press = True
        self.stop_playback()

        file_path = filedialog.askopenfilename(filetypes=[("MIDI files", "*.mid"), ("MIDI files", "*.midi")])
        if file_path:
            currentVAL = list(self.drums_frame_entry_1.cget("values"))
            if file_path not in currentVAL:
                currentVAL.append(file_path)
                self.drums_frame_entry_1.configure(values=currentVAL)

            self.drums_frame_entry_1.set(file_path)

            midi_file = MidiFile(file_path)
            self.total_time = midi_file.length
            self.drums_timelineTextLoadMIDI = (
                f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}"
                if self.config_data['timestamp']
                else f"X:XX:XX / {str(datetime.timedelta(seconds=int(self.total_time)))}"
            )
            self.drums_timeline.configure(text=self.drums_timelineTextLoadMIDI)

            self.config_data['drumsMidiFile'] = file_path
            if 'drumsAddedMidi' not in self.config_data:
                self.config_data['drumsAddedMidi'] = []
            if file_path not in self.config_data['drumsAddedMidi']:
                self.config_data['drumsAddedMidi'].append(file_path)

            with open(config_path, 'w') as config_file:
                json.dump(self.config_data, config_file, indent=2)

            self.ignore_key_press = False

    def select_frame_by_name(self, name):
        self.home_button.configure(fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonSelectedColor"] if name == "home" else self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"])
        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.home_frame.grid_forget()

        self.midi_hub.configure(fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonSelectedColor"] if name == "midi_hub" else self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"])
        if name == "midi_hub":
            self.midi_hub_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.midi_hub_frame.grid_forget()
            for widget in self.midi_hub_frame.winfo_children():
                if widget != self.midi_hub_searchbar and \
                (not hasattr(self, 'search_button') or widget != self.search_button) and \
                (not hasattr(self, 'sort_combo') or widget != self.sort_combo):
                    widget.destroy()

            please_wait = customtkinter.CTkLabel(
                self.midi_hub_frame, text="Please Wait...", text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
                compound="left", font=self.global_font40
            )
            please_wait.grid(row=1, column=0, padx=10, pady=(150,0), sticky="nsew")
            please_wait2 = customtkinter.CTkLabel(
                self.midi_hub_frame, text="Fetching from nanomidi.net...", text_color=self.activeThemeData["Theme"]["MIDIHub"]["TextColor"],
                compound="left", font=self.global_font
            )
            please_wait2.grid(row=2, column=0, padx=10, pady=(100,0), sticky="nsew")

        self.settings_tab.configure(fg_color=self.activeThemeData["Theme"]["Navigation"]["TabButtonSelectedColor"] if name == "settings_tab" else self.activeThemeData["Theme"]["Navigation"]["TabButtonColor"])
        if name == "settings_tab":
            self.settings_tab_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.settings_tab_frame.grid_forget()

        if name == "permission_tab":
            self.permission_tab_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.permission_tab_frame.grid_forget()

        if name == "drums_tab":
            self.drums_tab_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.drums_tab_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def midi_hub_event(self):
        self.select_frame_by_name("midi_hub")
        threading.Thread(target=self.load_midi_data).start()

    def settings_tab_event(self):
        self.select_frame_by_name("settings_tab")

    def permission_tab_event(self):
        self.select_frame_by_name("permission_tab")

    def drums_tab_event(self):
        self.select_frame_by_name("drums_tab")

    def create_debug_console(self):
        ctypes.windll.kernel32.AllocConsole()
        sys.stdout = open('CONOUT$', 'w')
        sys.stderr = open('CONOUT$', 'w')
        sys.stdin = open('CONIN$', 'r')
        print("created output.")

    def close_debug_console(self):
        ctypes.windll.kernel32.FreeConsole()

        sys.stdout.close()
        sys.stderr.close()
        sys.stdin.close()

        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__
        sys.stdin = sys.__stdin__

        print("closed output.")

    def fetchThemes(self):
        try:
            response = requests.get("https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/refs/heads/main/api/theme.json")
            response.raise_for_status()
            data = response.json()
            
            theme_names = list(data["availableThemes"].keys())
            return theme_names
        except requests.RequestException as e:
            print(e)
            return []
        
    def start_tracked_thread(self, target, args=(), daemon=True):
        with self.thread_lock:
            thread = threading.Thread(target=target, args=args, daemon=daemon)
            self.active_threads.append(thread)
            thread.start()
            return thread
    
    def cleanup_finished_threads(self):
        with self.thread_lock:
            self.active_threads = [t for t in self.active_threads if t.is_alive()]
    
    def on_closing(self):
        try:
            if hasattr(self, 'listener') and self.listener:
                self.listener.stop()
                print("Keyboard listener stopped")
            
            if hasattr(self, 'isRunning') and self.isRunning:
                self.CloseThread = True
                self.pause_event.set()
            
            if hasattr(self, 'pressed_keys') and self.pressed_keys:
                for key in list(self.pressed_keys):
                    try:
                        self.keyboard_controller.release(key)
                    except:
                        pass
                self.pressed_keys.clear()
            
            if hasattr(self, 'keyboard_queue'):
                try:
                    while not self.keyboard_queue.empty():
                        self.keyboard_queue.get_nowait()
                except:
                    pass
            
            if hasattr(self, 'active_threads'):
                with self.thread_lock:
                    active_count = len([t for t in self.active_threads if t.is_alive()])
                    if active_count > 0:
                        print(f"Waiting for {active_count} threads to finish...")
                        for thread in self.active_threads:
                            if thread.is_alive() and not thread.daemon:
                                thread.join(timeout=2.0)
            
            print("Application cleanup completed")
        except Exception as e:
            print(f"Error during cleanup: {e}")
        finally:
            self.destroy()
    
    def CreateToolTip(self, widget, text):
        if not os_name == "Darwin":
            toolTip = ToolTip(widget)
            def enter(event):
                toolTip.showtip(text)
            def leave(event):
                toolTip.hidetip()
            widget.bind('<Enter>', enter)
            widget.bind('<Leave>', leave)

if __name__ == "__main__":
    loading = LoadingScreen()
    loading.mainloop()
